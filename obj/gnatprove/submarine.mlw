(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_short_integer =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_short_integer__ref =
  { mutable short_short_integer__content "model_trace:" "name:" : short_short_integer }
 
 function short_short_integer__ref___projection 
   (a : short_short_integer__ref) : short_short_integer =
  a.short_short_integer__content
 
 meta "model_projection" function short_short_integer__ref___projection
 
 meta "inline : no" function short_short_integer__ref___projection
 
 val short_short_integer__havoc 
   (x : short_short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer__rep
 use        Standard__short_short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_short_integer.short_short_integer) : int =
  (Standard__short_short_integer.short_short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_short_integer.short_short_integer, 
 predicate in_range = Standard__short_short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type short_integer =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_integer__ref =
  { mutable short_integer__content "model_trace:" "name:" : short_integer }
 
 function short_integer__ref___projection 
   (a : short_integer__ref) : short_integer =
  a.short_integer__content
 
 meta "model_projection" function short_integer__ref___projection
 
 meta "inline : no" function short_integer__ref___projection
 
 val short_integer__havoc 
   (x : short_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer__rep
 use        Standard__short_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__short_integer.short_integer) : int =
  (Standard__short_integer.short_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__short_integer.short_integer, 
 predicate in_range = Standard__short_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer__ref =
  { mutable integer__content "model_trace:" "name:" : integer }
 
 function integer__ref___projection 
   (a : integer__ref) : integer =
  a.integer__content
 
 meta "model_projection" function integer__ref___projection
 
 meta "inline : no" function integer__ref___projection
 
 val integer__havoc 
   (x : integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer__rep
 use        Standard__integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer.integer) : int =
  (Standard__integer.integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer.integer, 
 predicate in_range = Standard__integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_integer =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_integer__ref =
  { mutable long_integer__content "model_trace:" "name:" : long_integer }
 
 function long_integer__ref___projection 
   (a : long_integer__ref) : long_integer =
  a.long_integer__content
 
 meta "model_projection" function long_integer__ref___projection
 
 meta "inline : no" function long_integer__ref___projection
 
 val long_integer__havoc 
   (x : long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer__rep
 use        Standard__long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_integer.long_integer) : int =
  (Standard__long_integer.long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_integer.long_integer, 
 predicate in_range = Standard__long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type long_long_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_long_integer__ref =
  { mutable long_long_integer__content "model_trace:" "name:" : long_long_integer }
 
 function long_long_integer__ref___projection 
   (a : long_long_integer__ref) : long_long_integer =
  a.long_long_integer__content
 
 meta "model_projection" function long_long_integer__ref___projection
 
 meta "inline : no" function long_long_integer__ref___projection
 
 val long_long_integer__havoc 
   (x : long_long_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer__rep
 use        Standard__long_long_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__long_long_integer.long_long_integer) : int =
  (Standard__long_long_integer.long_long_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__long_long_integer.long_long_integer, 
 predicate in_range = Standard__long_long_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use import "int".Int

 type natural =
  < range 0 2147483647 >
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type natural__ref =
  { mutable natural__content "model_trace:" "name:" : natural }
 
 function natural__ref___projection 
   (a : natural__ref) : natural =
  a.natural__content
 
 meta "model_projection" function natural__ref___projection
 
 meta "inline : no" function natural__ref___projection
 
 val natural__havoc 
   (x : natural__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural__rep
 use        Standard__natural
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__natural.natural) : int =
  (Standard__natural.natural'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__natural.natural, 
 predicate in_range = Standard__natural.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use import "int".Int

 type positive =
  < range 1 2147483647 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type positive__ref =
  { mutable positive__content "model_trace:" "name:" : positive }
 
 function positive__ref___projection 
   (a : positive__ref) : positive =
  a.positive__content
 
 meta "model_projection" function positive__ref___projection
 
 meta "inline : no" function positive__ref___projection
 
 val positive__havoc 
   (x : positive__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive__rep
 use        Standard__positive
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__positive.positive) : int =
  (Standard__positive.positive'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__positive.positive, 
 predicate in_range = Standard__positive.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type short_float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = short_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type short_float__ref =
  { mutable short_float__content "model_trace:" "name:" : short_float }
 
 function short_float__ref___projection 
   (a : short_float__ref) : short_float =
  a.short_float__content
 
 meta "model_projection" function short_float__ref___projection
 
 meta "inline : no" function short_float__ref___projection
 
 val short_float__havoc 
   (x : short_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float__rep
 use        Standard__short_float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__short_float.short_float, 
 predicate in_range = Standard__short_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32

 type float 
 
 function first 
   : Float32.t =
  (Float32.neg (340282346638528859811704183484516925440.0:Float32.t))
 
 function last 
   : Float32.t =
  (340282346638528859811704183484516925440.0:Float32.t)
 
 predicate in_range 
   (x : Float32.t)  =
  (Float32.t'isFinite x)
 
 clone export "ada__model".Static_Float32 with
 type t = float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type float__ref =
  { mutable float__content "model_trace:" "name:" : float }
 
 function float__ref___projection 
   (a : float__ref) : float =
  a.float__content
 
 meta "model_projection" function float__ref___projection
 
 meta "inline : no" function float__ref___projection
 
 val float__havoc 
   (x : float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float__rep
 use        Standard__float
 use        "_gnatprove_standard".Float32
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float32 with
 type t = Standard__float.float, 
 predicate in_range = Standard__float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64

 type long_float 
 
 function first 
   : Float64.t =
  (Float64.neg (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t))
 
 function last 
   : Float64.t =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0:Float64.t)
 
 predicate in_range 
   (x : Float64.t)  =
  (Float64.t'isFinite x)
 
 clone export "ada__model".Static_Float64 with
 type t = long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type long_float__ref =
  { mutable long_float__content "model_trace:" "name:" : long_float }
 
 function long_float__ref___projection 
   (a : long_float__ref) : long_float =
  a.long_float__content
 
 meta "model_projection" function long_float__ref___projection
 
 meta "inline : no" function long_float__ref___projection
 
 val long_float__havoc 
   (x : long_float__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float__rep
 use        Standard__long_float
 use        "_gnatprove_standard".Float64
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Float64 with
 type t = Standard__long_float.long_float, 
 predicate in_range = Standard__long_float.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  255
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type character__ref =
  { mutable character__content "model_trace:" "name:" : character }
 
 function character__ref___projection 
   (a : character__ref) : character =
  a.character__content
 
 meta "model_projection" function character__ref___projection
 
 meta "inline : no" function character__ref___projection
 
 val character__havoc 
   (x : character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character__rep
 use        Standard__character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__character.character, 
 predicate in_range = Standard__character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  65535
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_character__ref =
  { mutable wide_character__content "model_trace:" "name:" : wide_character }
 
 function wide_character__ref___projection 
   (a : wide_character__ref) : wide_character =
  a.wide_character__content
 
 meta "model_projection" function wide_character__ref___projection
 
 meta "inline : no" function wide_character__ref___projection
 
 val wide_character__havoc 
   (x : wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character__rep
 use        Standard__wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_character.wide_character, 
 predicate in_range = Standard__wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int

 type wide_wide_character 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type wide_wide_character__ref =
  { mutable wide_wide_character__content "model_trace:" "name:" : wide_wide_character }
 
 function wide_wide_character__ref___projection 
   (a : wide_wide_character__ref) : wide_wide_character =
  a.wide_wide_character__content
 
 meta "model_projection" function wide_wide_character__ref___projection
 
 meta "inline : no" function wide_wide_character__ref___projection
 
 val wide_wide_character__havoc 
   (x : wide_wide_character__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character__rep
 use        Standard__wide_wide_character
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__wide_wide_character.wide_wide_character, 
 predicate in_range = Standard__wide_wide_character.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character
 use        Standard__character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__character.character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_91   : int.
   (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
    ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_91   : int.
    (if (( (a__first <= temp___idx_91) /\ (temp___idx_91 <= a__last) )) then (
     ((Standard__character__rep.to_rep (get a temp___idx_91)) = (Standard__character__rep.to_rep (get b ((b__first - a__first) + temp___idx_91))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__character.component_type, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character__rep
 use        Array__Int__Standard__character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__character.component_type, 
 function to_rep = Standard__character__rep.to_rep, 
 type map = Array__Int__Standard__character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__character.get, 
 function bool_eq = Array__Int__Standard__character.bool_eq

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__positive
 use        Standard__character
 use        Array__Int__Standard__character
 use        Standard__integer__rep

 type component_type =
  Standard__character.character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__character.map, 
 function array_bool_eq = Array__Int__Standard__character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 function to_string 
   (x : Main.__image) : string
 
 function from_string 
   (x : string) : Main.__image
 
 type string__ref =
  { mutable string__content "model_trace:" "name:" : string }
 
 function string__ref___projection 
   (a : string__ref) : string =
  a.string__content
 
 meta "model_projection" function string__ref___projection
 
 meta "inline : no" function string__ref___projection
 
 val string__havoc 
   (x : string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character
 use        Standard__wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_character.wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_98   : int.
   (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
    ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_98   : int.
    (if (( (a__first <= temp___idx_98) /\ (temp___idx_98 <= a__last) )) then (
     ((Standard__wide_character__rep.to_rep (get a temp___idx_98)) = (Standard__wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_98))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character__rep
 use        Array__Int__Standard__wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_character.component_type, 
 function to_rep = Standard__wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_character.bool_eq

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_character

 type component_type =
  Standard__wide_character.wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_string__ref =
  { mutable wide_string__content "model_trace:" "name:" : wide_string }
 
 function wide_string__ref___projection 
   (a : wide_string__ref) : wide_string =
  a.wide_string__content
 
 meta "model_projection" function wide_string__ref___projection
 
 meta "inline : no" function wide_string__ref___projection
 
 val wide_string__havoc 
   (x : wide_string__ref) : unit
  writes {x}

end

(* Module for axiomatizing the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character
 use        Standard__wide_wide_character__rep

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_105   : int.
   (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
    ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_105   : int.
    (if (( (a__first <= temp___idx_105) /\ (temp___idx_105 <= a__last) )) then (
     ((Standard__wide_wide_character__rep.to_rep (get a temp___idx_105)) = (Standard__wide_wide_character__rep.to_rep (get b ((b__first - a__first) + temp___idx_105))))) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Standard__wide_wide_character__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get

end

(* Module for axiomatizing comparison for the array theory associated to type "wide_wide_string", created in Why.Gen.Arrays.Declare_Comparison_Symbols *)
module Array__Int__Standard__wide_wide_character_Comp
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character__rep
 use        Array__Int__Standard__wide_wide_character

 function index_Index_one 
   : int =
  1
 
 clone export "ada__model".Array_Int_Rep_Comparison_Axiom with
 type component_type = Array__Int__Standard__wide_wide_character.component_type, 
 function to_rep = Standard__wide_wide_character__rep.to_rep, 
 type map = Array__Int__Standard__wide_wide_character.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Standard__wide_wide_character.get, 
 function bool_eq = Array__Int__Standard__wide_wide_character.bool_eq

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer__rep
 use        Array__Int__Standard__wide_wide_character

 type component_type =
  Standard__wide_wide_character.wide_wide_character
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Standard__wide_wide_character.map, 
 function array_bool_eq = Array__Int__Standard__wide_wide_character.bool_eq, 
 type index_base_type = Standard__integer.integer, 
 type index_rep_type = int, 
 function to_rep = Standard__integer__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate index_dynamic_property = Standard__positive.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type wide_wide_string =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type wide_wide_string__ref =
  { mutable wide_wide_string__content "model_trace:" "name:" : wide_wide_string }
 
 function wide_wide_string__ref___projection 
   (a : wide_wide_string__ref) : wide_wide_string =
  a.wide_wide_string__content
 
 meta "model_projection" function wide_wide_string__ref___projection
 
 meta "inline : no" function wide_wide_string__ref___projection
 
 val wide_wide_string__havoc 
   (x : wide_wide_string__ref) : unit
  writes {x}

end

(* Module for fixed-point operation for type at system.ads:1, created in Why.Gen.Scalars.Create_Fixed_Point_Theory_If_Needed *)
module Fixed_Point__1_1000000000
 use import "_gnatprove_standard".Main
 use import "int".Int

 function num_small 
   : int =
  1
 
 function den_small 
   : int =
  1000000000
 
 clone export "ada__model".Fixed_Point_Rep with
 function num_small = num_small, 
 function den_small = den_small

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Main

 type duration 
 
 function num_small 
   : Main.__fixed =
  1
 
 function den_small 
   : Main.__fixed =
  1000000000
 
 function first 
   : Main.__fixed =
  ( -9223372036854775808 )
 
 function last 
   : Main.__fixed =
  9223372036854775807
 
 predicate in_range 
   (x : Main.__fixed)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type duration__ref =
  { mutable duration__content "model_trace:" "name:" : duration }
 
 function duration__ref___projection 
   (a : duration__ref) : duration =
  a.duration__content
 
 meta "model_projection" function duration__ref___projection
 
 meta "inline : no" function duration__ref___projection
 
 val duration__havoc 
   (x : duration__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_8 =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_8__ref =
  { mutable integer_8__content "model_trace:" "name:" : integer_8 }
 
 function integer_8__ref___projection 
   (a : integer_8__ref) : integer_8 =
  a.integer_8__content
 
 meta "model_projection" function integer_8__ref___projection
 
 meta "inline : no" function integer_8__ref___projection
 
 val integer_8__havoc 
   (x : integer_8__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8__rep
 use        Standard__integer_8
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_8.integer_8) : int =
  (Standard__integer_8.integer_8'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_8.integer_8, 
 predicate in_range = Standard__integer_8.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_16 =
  < range -32768 32767 >
 
 function first 
   : int =
  ( -32768 )
 
 function last 
   : int =
  32767
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_16__ref =
  { mutable integer_16__content "model_trace:" "name:" : integer_16 }
 
 function integer_16__ref___projection 
   (a : integer_16__ref) : integer_16 =
  a.integer_16__content
 
 meta "model_projection" function integer_16__ref___projection
 
 meta "inline : no" function integer_16__ref___projection
 
 val integer_16__havoc 
   (x : integer_16__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16__rep
 use        Standard__integer_16
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_16.integer_16) : int =
  (Standard__integer_16.integer_16'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_16.integer_16, 
 predicate in_range = Standard__integer_16.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_32 =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_32__ref =
  { mutable integer_32__content "model_trace:" "name:" : integer_32 }
 
 function integer_32__ref___projection 
   (a : integer_32__ref) : integer_32 =
  a.integer_32__content
 
 meta "model_projection" function integer_32__ref___projection
 
 meta "inline : no" function integer_32__ref___projection
 
 val integer_32__havoc 
   (x : integer_32__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32__rep
 use        Standard__integer_32
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_32.integer_32) : int =
  (Standard__integer_32.integer_32'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_32.integer_32, 
 predicate in_range = Standard__integer_32.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use import "int".Int

 type integer_64 =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type integer_64__ref =
  { mutable integer_64__content "model_trace:" "name:" : integer_64 }
 
 function integer_64__ref___projection 
   (a : integer_64__ref) : integer_64 =
  a.integer_64__content
 
 meta "model_projection" function integer_64__ref___projection
 
 meta "inline : no" function integer_64__ref___projection
 
 val integer_64__havoc 
   (x : integer_64__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64__rep
 use        Standard__integer_64
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__integer_64.integer_64) : int =
  (Standard__integer_64.integer_64'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__integer_64.integer_64, 
 predicate in_range = Standard__integer_64.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use import "int".Int

 type universal_integer =
  < range -9223372036854775808 9223372036854775807 >
 
 function first 
   : int =
  ( -9223372036854775808 )
 
 function last 
   : int =
  9223372036854775807
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type universal_integer__ref =
  { mutable universal_integer__content "model_trace:" "name:" : universal_integer }
 
 function universal_integer__ref___projection 
   (a : universal_integer__ref) : universal_integer =
  a.universal_integer__content
 
 meta "model_projection" function universal_integer__ref___projection
 
 meta "inline : no" function universal_integer__ref___projection
 
 val universal_integer__havoc 
   (x : universal_integer__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer__rep
 use        Standard__universal_integer
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Standard__universal_integer.universal_integer) : int =
  (Standard__universal_integer.universal_integer'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Standard__universal_integer.universal_integer, 
 predicate in_range = Standard__universal_integer.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "doorclosedopen" defined at submarine.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Submarine__doorclosedopen
 use import "_gnatprove_standard".Main
 use import "int".Int

 type doorclosedopen 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = doorclosedopen, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type doorclosedopen__ref =
  { mutable doorclosedopen__content "model_trace:" "name:" : doorclosedopen }
 
 function doorclosedopen__ref___projection 
   (a : doorclosedopen__ref) : doorclosedopen =
  a.doorclosedopen__content
 
 meta "model_projection" function doorclosedopen__ref___projection
 
 meta "inline : no" function doorclosedopen__ref___projection
 
 val doorclosedopen__havoc 
   (x : doorclosedopen__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "doorclosedopen" defined at submarine.ads:4, created in Gnat2Why.Types.Translate_Type *)
module Submarine__doorclosedopen__rep
 use        Submarine__doorclosedopen
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__doorclosedopen.doorclosedopen, 
 predicate in_range = Submarine__doorclosedopen.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "locklockedunlocked" defined at submarine.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Submarine__locklockedunlocked
 use import "_gnatprove_standard".Main
 use import "int".Int

 type locklockedunlocked 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = locklockedunlocked, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type locklockedunlocked__ref =
  { mutable locklockedunlocked__content "model_trace:" "name:" : locklockedunlocked }
 
 function locklockedunlocked__ref___projection 
   (a : locklockedunlocked__ref) : locklockedunlocked =
  a.locklockedunlocked__content
 
 meta "model_projection" function locklockedunlocked__ref___projection
 
 meta "inline : no" function locklockedunlocked__ref___projection
 
 val locklockedunlocked__havoc 
   (x : locklockedunlocked__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "locklockedunlocked" defined at submarine.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Submarine__locklockedunlocked__rep
 use        Submarine__locklockedunlocked
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__locklockedunlocked.locklockedunlocked, 
 predicate in_range = Submarine__locklockedunlocked.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "divesurfacewarnmaintain" defined at submarine.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Submarine__divesurfacewarnmaintain
 use import "_gnatprove_standard".Main
 use import "int".Int

 type divesurfacewarnmaintain 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  3
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = divesurfacewarnmaintain, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type divesurfacewarnmaintain__ref =
  { mutable divesurfacewarnmaintain__content "model_trace:" "name:" : divesurfacewarnmaintain }
 
 function divesurfacewarnmaintain__ref___projection 
   (a : divesurfacewarnmaintain__ref) : divesurfacewarnmaintain =
  a.divesurfacewarnmaintain__content
 
 meta "model_projection" function divesurfacewarnmaintain__ref___projection
 
 meta "inline : no" function divesurfacewarnmaintain__ref___projection
 
 val divesurfacewarnmaintain__havoc 
   (x : divesurfacewarnmaintain__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "divesurfacewarnmaintain" defined at submarine.ads:10, created in Gnat2Why.Types.Translate_Type *)
module Submarine__divesurfacewarnmaintain__rep
 use        Submarine__divesurfacewarnmaintain
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__divesurfacewarnmaintain.divesurfacewarnmaintain, 
 predicate in_range = Submarine__divesurfacewarnmaintain.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "reactertemp" defined at submarine.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Submarine__reactertemp
 use import "_gnatprove_standard".Main
 use import "int".Int

 type reactertemp 
 
 function first 
   : int =
  0
 
 function last 
   : int =
  1
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = reactertemp, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type reactertemp__ref =
  { mutable reactertemp__content "model_trace:" "name:" : reactertemp }
 
 function reactertemp__ref___projection 
   (a : reactertemp__ref) : reactertemp =
  a.reactertemp__content
 
 meta "model_projection" function reactertemp__ref___projection
 
 meta "inline : no" function reactertemp__ref___projection
 
 val reactertemp__havoc 
   (x : reactertemp__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "reactertemp" defined at submarine.ads:13, created in Gnat2Why.Types.Translate_Type *)
module Submarine__reactertemp__rep
 use        Submarine__reactertemp
 use import "_gnatprove_standard".Main

 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__reactertemp.reactertemp, 
 predicate in_range = Submarine__reactertemp.in_range
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "lock" defined at submarine.ads:16, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__lock__rep
 use import "_gnatprove_standard".Main
 use        Submarine__locklockedunlocked
 use        Submarine__locklockedunlocked__rep

 type __split_fields =
  { rec__submarine__lock__lockstatus "model_trace:.2654" "name:lockStatus" : Submarine__locklockedunlocked.locklockedunlocked }
 
 function __split_fields_lockStatus__projection "model_trace:.2654" "name:lockStatus" 
   (a : __split_fields) : Submarine__locklockedunlocked.locklockedunlocked =
  a.rec__submarine__lock__lockstatus
 
 meta "model_projection" function __split_fields_lockStatus__projection
 
 meta "inline : no" function __split_fields_lockStatus__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___projection
 
 meta "inline : no" function __split_fields__ref___projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___projection
 
 meta "inline : no" function __rep___projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__lock__lockstatus__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__lock__lockstatus_ 
   (a : __rep) : Submarine__locklockedunlocked.locklockedunlocked
  requires {  (submarine__lock__lockstatus__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__lock__lockstatus) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (((Submarine__locklockedunlocked__rep.to_rep a.__split_fields.rec__submarine__lock__lockstatus) = (Submarine__locklockedunlocked__rep.to_rep b.__split_fields.rec__submarine__lock__lockstatus))) then (
   True) else (
   False))

end

(* Module for axiomatizing type "lock" defined at submarine.ads:16, created in Gnat2Why.Types.Translate_Type *)
module Submarine__lock
 use export Submarine__lock__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type lock =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : lock) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : lock) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : lock.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : lock.
   ((object__alignment a) >= 0))
 
 function submarine__lock__lockstatus__first__bit 
   : int
 
 function submarine__lock__lockstatus__last__bit 
   : int
 
 function submarine__lock__lockstatus__position 
   : int
 
 axiom submarine__lock__lockstatus__first__bit_axiom :
  ((submarine__lock__lockstatus__first__bit ) >= 0)
 
 axiom submarine__lock__lockstatus__last__bit_axiom :
  ((submarine__lock__lockstatus__last__bit ) > (submarine__lock__lockstatus__first__bit ))
 
 axiom submarine__lock__lockstatus__position_axiom :
  ((submarine__lock__lockstatus__position ) >= 0)
 
 function user_eq 
   (a : lock) (b : lock) : bool
 
 function dummy 
   : lock
 
 type lock__ref =
  { mutable lock__content "model_trace:" "name:" : lock }
 
 function lock__ref___projection 
   (a : lock__ref) : lock =
  a.lock__content
 
 meta "model_projection" function lock__ref___projection
 
 meta "inline : no" function lock__ref___projection
 
 val lock__havoc 
   (x : lock__ref) : unit
  writes {x}

end

(* Module for axiomatizing the record theory associated to type "door" defined at submarine.ads:21, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__door__rep
 use import "_gnatprove_standard".Main
 use        Submarine__doorclosedopen
 use        Submarine__doorclosedopen__rep
 use        Submarine__lock

 type __split_fields =
  { rec__submarine__door__doorstatus "model_trace:.2676" "name:doorStatus" : Submarine__doorclosedopen.doorclosedopen; rec__submarine__door__alock "model_trace:.2686" "name:alock" : Submarine__lock.lock }
 
 function __split_fields_doorStatus__projection "model_trace:.2676" "name:doorStatus" 
   (a : __split_fields) : Submarine__doorclosedopen.doorclosedopen =
  a.rec__submarine__door__doorstatus
 
 meta "model_projection" function __split_fields_doorStatus__projection
 
 meta "inline : no" function __split_fields_doorStatus__projection
 
 function __split_fields_alock__projection "model_trace:.2686" "name:alock" 
   (a : __split_fields) : Submarine__lock.lock =
  a.rec__submarine__door__alock
 
 meta "model_projection" function __split_fields_alock__projection
 
 meta "inline : no" function __split_fields_alock__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___2__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___2__projection
 
 meta "inline : no" function __split_fields__ref___2__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___2__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___2__projection
 
 meta "inline : no" function __rep___2__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__door__doorstatus__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__doorstatus_ 
   (a : __rep) : Submarine__doorclosedopen.doorclosedopen
  requires {  (submarine__door__doorstatus__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__doorstatus) }
 
 predicate submarine__door__alock__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__door__alock_ 
   (a : __rep) : Submarine__lock.lock
  requires {  (submarine__door__alock__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__door__alock) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ((Submarine__doorclosedopen__rep.to_rep a.__split_fields.rec__submarine__door__doorstatus) = (Submarine__doorclosedopen__rep.to_rep b.__split_fields.rec__submarine__door__doorstatus)) /\ ((Submarine__lock.bool_eq a.__split_fields.rec__submarine__door__alock b.__split_fields.rec__submarine__door__alock) = True) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "door" defined at submarine.ads:21, created in Gnat2Why.Types.Translate_Type *)
module Submarine__door
 use export Submarine__door__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type door =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : door) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : door) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : door.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : door.
   ((object__alignment a) >= 0))
 
 function submarine__door__doorstatus__first__bit 
   : int
 
 function submarine__door__doorstatus__last__bit 
   : int
 
 function submarine__door__doorstatus__position 
   : int
 
 axiom submarine__door__doorstatus__first__bit_axiom :
  ((submarine__door__doorstatus__first__bit ) >= 0)
 
 axiom submarine__door__doorstatus__last__bit_axiom :
  ((submarine__door__doorstatus__last__bit ) > (submarine__door__doorstatus__first__bit ))
 
 axiom submarine__door__doorstatus__position_axiom :
  ((submarine__door__doorstatus__position ) >= 0)
 
 function submarine__door__alock__first__bit 
   : int
 
 function submarine__door__alock__last__bit 
   : int
 
 function submarine__door__alock__position 
   : int
 
 axiom submarine__door__alock__first__bit_axiom :
  ((submarine__door__alock__first__bit ) >= 0)
 
 axiom submarine__door__alock__last__bit_axiom :
  ((submarine__door__alock__last__bit ) > (submarine__door__alock__first__bit ))
 
 axiom submarine__door__alock__position_axiom :
  ((submarine__door__alock__position ) >= 0)
 
 function user_eq 
   (a : door) (b : door) : bool
 
 function dummy 
   : door
 
 type door__ref =
  { mutable door__content "model_trace:" "name:" : door }
 
 function door__ref___projection 
   (a : door__ref) : door =
  a.door__content
 
 meta "model_projection" function door__ref___projection
 
 meta "inline : no" function door__ref___projection
 
 val door__havoc 
   (x : door__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "Tdr_indexB" defined at submarine.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tdr_indexB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdr_indexB =
  < range -128 127 >
 
 function first 
   : int =
  ( -128 )
 
 function last 
   : int =
  127
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdr_indexB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdr_indexB__ref =
  { mutable tdr_indexB__content "model_trace:" "name:" : tdr_indexB }
 
 function tdr_indexB__ref___projection 
   (a : tdr_indexB__ref) : tdr_indexB =
  a.tdr_indexB__content
 
 meta "model_projection" function tdr_indexB__ref___projection
 
 meta "inline : no" function tdr_indexB__ref___projection
 
 val tdr_indexB__havoc 
   (x : tdr_indexB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "Tdr_indexB" defined at submarine.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Submarine__Tdr_indexB__rep
 use        Submarine__Tdr_indexB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__Tdr_indexB.tdr_indexB) : int =
  (Submarine__Tdr_indexB.tdr_indexB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__Tdr_indexB.tdr_indexB, 
 predicate in_range = Submarine__Tdr_indexB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "dr_index" defined at submarine.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Submarine__dr_index
 use import "_gnatprove_standard".Main
 use import "int".Int

 type dr_index =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = dr_index, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type dr_index__ref =
  { mutable dr_index__content "model_trace:" "name:" : dr_index }
 
 function dr_index__ref___projection 
   (a : dr_index__ref) : dr_index =
  a.dr_index__content
 
 meta "model_projection" function dr_index__ref___projection
 
 meta "inline : no" function dr_index__ref___projection
 
 val dr_index__havoc 
   (x : dr_index__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "dr_index" defined at submarine.ads:27, created in Gnat2Why.Types.Translate_Type *)
module Submarine__dr_index__rep
 use        Submarine__dr_index
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__dr_index.dr_index) : int =
  (Submarine__dr_index.dr_index'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__dr_index.dr_index, 
 predicate in_range = Submarine__dr_index.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the array theory associated to type "TdoorsB" defined at submarine.ads:30, created in Why.Gen.Arrays.Create_Rep_Array_Theory *)
module Array__Int__Submarine__door
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__door

 function index_I1_one 
   : int =
  1
 
 type component_type =
  Submarine__door.door
 
 clone export "_gnatprove_standard".Array__1 with
 type I1.t = int, 
 predicate I1.le = Int.(<=), 
 predicate I1.lt = Int.(<), 
 predicate I1.gt = Int.(>), 
 function I1.add = Int.(+), 
 function I1.sub = Int.(-), 
 function I1.one = index_I1_one, 
 type component_type = component_type
 
 function bool_eq 
   (a : map) (a__first : int) (a__last : int) (b : map) (b__first : int) (b__last : int) : bool =
  ( (if ((a__first <= a__last)) then (
   ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
   (b__first > b__last))) /\ (forall temp___idx_154   : int.
   (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
    ((Submarine__door.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154))) = True)) else true)) )
 
 axiom bool_eq_rev :
  (forall a   b   : map.
  (forall a__first   a__last   b__first   b__last   : int.
   ( ((bool_eq b b__first b__last a a__first a__last) = True) -> ( (if ((a__first <= a__last)) then (
    ( (b__first <= b__last) /\ ((a__last - a__first) = (b__last - b__first)) )) else (
    (b__first > b__last))) /\ (forall temp___idx_154   : int.
    (if (( (a__first <= temp___idx_154) /\ (temp___idx_154 <= a__last) )) then (
     ((Submarine__door.bool_eq (get a temp___idx_154) (get b ((b__first - a__first) + temp___idx_154))) = True)) else true)) ) )))

end

(* Module for axiomatizing concatenation for the array theory associated to type "TdoorsB" defined at submarine.ads:30, created in Why.Gen.Arrays.Declare_Concatenation_Symbols *)
module Array__Int__Submarine__door__Concat
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Array__Int__Submarine__door

 function index_Index_one 
   : int =
  1
 
 clone export "_gnatprove_standard".Array__1__Concat with
 type component_type = Array__Int__Submarine__door.component_type, 
 type map = Array__Int__Submarine__door.map, 
 type Index.t = int, 
 predicate Index.le = Int.(<=), 
 predicate Index.lt = Int.(<), 
 predicate Index.gt = Int.(>), 
 function Index.add = Int.(+), 
 function Index.sub = Int.(-), 
 function Index.one = index_Index_one, 
 function get = Array__Int__Submarine__door.get

end

(* Module for axiomatizing type "TdoorsB" defined at submarine.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TdoorsB
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__door
 use        Submarine__Tdr_indexB
 use        Submarine__Tdr_indexB__rep
 use        Submarine__dr_index
 use        Array__Int__Submarine__door

 type component_type =
  Submarine__door.door
 
 function index_1_id 
   (x : int) : int =
  x
 
 clone export "ada__model".Unconstr_Array with
 type map = Array__Int__Submarine__door.map, 
 function array_bool_eq = Array__Int__Submarine__door.bool_eq, 
 type index_base_type = Submarine__Tdr_indexB.tdr_indexB, 
 type index_rep_type = int, 
 function to_rep = Submarine__Tdr_indexB__rep.to_rep, 
 function rep_to_int = index_1_id, 
 predicate in_range_base = Submarine__Tdr_indexB.in_range, 
 predicate index_dynamic_property = Submarine__dr_index.dynamic_property, 
 predicate index_rep_le = Int.(<=)
 
 type tdoorsB =
  __t
 
 meta "model_projection" function to_array
 
 meta "inline : no" function to_array
 
 meta "model_projection" function first
 
 meta "inline : no" function first
 
 meta "model_projection" function last
 
 meta "inline : no" function last
 
 type tdoorsB__ref =
  { mutable tdoorsB__content "model_trace:" "name:" : tdoorsB }
 
 function tdoorsB__ref___projection 
   (a : tdoorsB__ref) : tdoorsB =
  a.tdoorsB__content
 
 meta "model_projection" function tdoorsB__ref___projection
 
 meta "inline : no" function tdoorsB__ref___projection
 
 val tdoorsB__havoc 
   (x : tdoorsB__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "doors" defined at submarine.ads:30, created in Gnat2Why.Types.Translate_Type *)
module Submarine__doors
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__door
 use        Array__Int__Submarine__door

 type component_type =
  Submarine__door.door
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 clone export "ada__model".Constr_Array with
 type map = Array__Int__Submarine__door.map, 
 function array_bool_eq = Array__Int__Submarine__door.bool_eq, 
 function first = first, 
 function last = last, 
 type index_rep_type = int

end

(* Module for axiomatizing type "ToxygenlevelB" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ToxygenlevelB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type toxygenlevelB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = toxygenlevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type toxygenlevelB__ref =
  { mutable toxygenlevelB__content "model_trace:" "name:" : toxygenlevelB }
 
 function toxygenlevelB__ref___projection 
   (a : toxygenlevelB__ref) : toxygenlevelB =
  a.toxygenlevelB__content
 
 meta "model_projection" function toxygenlevelB__ref___projection
 
 meta "inline : no" function toxygenlevelB__ref___projection
 
 val toxygenlevelB__havoc 
   (x : toxygenlevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "ToxygenlevelB" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__ToxygenlevelB__rep
 use        Submarine__ToxygenlevelB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__ToxygenlevelB.toxygenlevelB) : int =
  (Submarine__ToxygenlevelB.toxygenlevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__ToxygenlevelB.toxygenlevelB, 
 predicate in_range = Submarine__ToxygenlevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "oxygenlevel" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__oxygenlevel
 use import "_gnatprove_standard".Main
 use import "int".Int

 type oxygenlevel =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = oxygenlevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type oxygenlevel__ref =
  { mutable oxygenlevel__content "model_trace:" "name:" : oxygenlevel }
 
 function oxygenlevel__ref___projection 
   (a : oxygenlevel__ref) : oxygenlevel =
  a.oxygenlevel__content
 
 meta "model_projection" function oxygenlevel__ref___projection
 
 meta "inline : no" function oxygenlevel__ref___projection
 
 val oxygenlevel__havoc 
   (x : oxygenlevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "oxygenlevel" defined at submarine.ads:33, created in Gnat2Why.Types.Translate_Type *)
module Submarine__oxygenlevel__rep
 use        Submarine__oxygenlevel
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__oxygenlevel.oxygenlevel) : int =
  (Submarine__oxygenlevel.oxygenlevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__oxygenlevel.oxygenlevel, 
 predicate in_range = Submarine__oxygenlevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "TdepthlevelB" defined at submarine.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TdepthlevelB
 use import "_gnatprove_standard".Main
 use import "int".Int

 type tdepthlevelB =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = tdepthlevelB, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type tdepthlevelB__ref =
  { mutable tdepthlevelB__content "model_trace:" "name:" : tdepthlevelB }
 
 function tdepthlevelB__ref___projection 
   (a : tdepthlevelB__ref) : tdepthlevelB =
  a.tdepthlevelB__content
 
 meta "model_projection" function tdepthlevelB__ref___projection
 
 meta "inline : no" function tdepthlevelB__ref___projection
 
 val tdepthlevelB__havoc 
   (x : tdepthlevelB__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "TdepthlevelB" defined at submarine.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Submarine__TdepthlevelB__rep
 use        Submarine__TdepthlevelB
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__TdepthlevelB.tdepthlevelB) : int =
  (Submarine__TdepthlevelB.tdepthlevelB'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__TdepthlevelB.tdepthlevelB, 
 predicate in_range = Submarine__TdepthlevelB.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "depthlevel" defined at submarine.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Submarine__depthlevel
 use import "_gnatprove_standard".Main
 use import "int".Int

 type depthlevel =
  < range -2147483648 2147483647 >
 
 function first 
   : int =
  ( -2147483648 )
 
 function last 
   : int =
  2147483647
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = depthlevel, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type depthlevel__ref =
  { mutable depthlevel__content "model_trace:" "name:" : depthlevel }
 
 function depthlevel__ref___projection 
   (a : depthlevel__ref) : depthlevel =
  a.depthlevel__content
 
 meta "model_projection" function depthlevel__ref___projection
 
 meta "inline : no" function depthlevel__ref___projection
 
 val depthlevel__havoc 
   (x : depthlevel__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "depthlevel" defined at submarine.ads:36, created in Gnat2Why.Types.Translate_Type *)
module Submarine__depthlevel__rep
 use        Submarine__depthlevel
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__depthlevel.depthlevel) : int =
  (Submarine__depthlevel.depthlevel'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__depthlevel.depthlevel, 
 predicate in_range = Submarine__depthlevel.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing the record theory associated to type "submarine" defined at submarine.ads:39, created in Why.Gen.Records.Create_Rep_Record_Theory_If_Needed *)
module Submarine__submarine__rep
 use import "_gnatprove_standard".Main
 use        Submarine__divesurfacewarnmaintain
 use        Submarine__divesurfacewarnmaintain__rep
 use        Submarine__reactertemp
 use        Submarine__reactertemp__rep
 use        Submarine__doors
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door

 type __split_fields =
  { rec__submarine__submarine__ds "model_trace:.2751" "name:ds" : Array__Int__Submarine__door.map; rec__submarine__submarine__ox "model_trace:.2761" "name:ox" : Submarine__oxygenlevel.oxygenlevel; rec__submarine__submarine__dl "model_trace:.2772" "name:dl" : Submarine__depthlevel.depthlevel; rec__submarine__submarine__subdive "model_trace:.2783" "name:subDive" : Submarine__divesurfacewarnmaintain.divesurfacewarnmaintain; rec__submarine__submarine__rt "model_trace:.2793" "name:rt" : Submarine__reactertemp.reactertemp }
 
 function __split_fields_ds__projection "model_trace:.2751" "name:ds" 
   (a : __split_fields) : Array__Int__Submarine__door.map =
  a.rec__submarine__submarine__ds
 
 meta "model_projection" function __split_fields_ds__projection
 
 meta "inline : no" function __split_fields_ds__projection
 
 function __split_fields_ox__projection "model_trace:.2761" "name:ox" 
   (a : __split_fields) : Submarine__oxygenlevel.oxygenlevel =
  a.rec__submarine__submarine__ox
 
 meta "model_projection" function __split_fields_ox__projection
 
 meta "inline : no" function __split_fields_ox__projection
 
 function __split_fields_dl__projection "model_trace:.2772" "name:dl" 
   (a : __split_fields) : Submarine__depthlevel.depthlevel =
  a.rec__submarine__submarine__dl
 
 meta "model_projection" function __split_fields_dl__projection
 
 meta "inline : no" function __split_fields_dl__projection
 
 function __split_fields_subDive__projection "model_trace:.2783" "name:subDive" 
   (a : __split_fields) : Submarine__divesurfacewarnmaintain.divesurfacewarnmaintain =
  a.rec__submarine__submarine__subdive
 
 meta "model_projection" function __split_fields_subDive__projection
 
 meta "inline : no" function __split_fields_subDive__projection
 
 function __split_fields_rt__projection "model_trace:.2793" "name:rt" 
   (a : __split_fields) : Submarine__reactertemp.reactertemp =
  a.rec__submarine__submarine__rt
 
 meta "model_projection" function __split_fields_rt__projection
 
 meta "inline : no" function __split_fields_rt__projection
 
 type __split_fields__ref =
  { mutable __split_fields__content "model_trace:" "name:" : __split_fields }
 
 function __split_fields__ref___3__projection 
   (a : __split_fields__ref) : __split_fields =
  a.__split_fields__content
 
 meta "model_projection" function __split_fields__ref___3__projection
 
 meta "inline : no" function __split_fields__ref___3__projection
 
 val __split_fields__havoc 
   (x : __split_fields__ref) : unit
  writes {x}
 
 type __rep =
  { __split_fields "model_trace:" "name:" : __split_fields }
 
 function __rep___3__projection 
   (a : __rep) : __split_fields =
  a.__split_fields
 
 meta "model_projection" function __rep___3__projection
 
 meta "inline : no" function __rep___3__projection
 
 function to_base 
   (a : __rep) : __rep =
  a
 
 function of_base 
   (a : __rep) : __rep =
  a
 
 predicate submarine__submarine__ds__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__ds_ 
   (a : __rep) : Array__Int__Submarine__door.map
  requires {  (submarine__submarine__ds__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__ds) }
 
 predicate submarine__submarine__ox__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__ox_ 
   (a : __rep) : Submarine__oxygenlevel.oxygenlevel
  requires {  (submarine__submarine__ox__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__ox) }
 
 predicate submarine__submarine__dl__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__dl_ 
   (a : __rep) : Submarine__depthlevel.depthlevel
  requires {  (submarine__submarine__dl__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__dl) }
 
 predicate submarine__submarine__subdive__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__subdive_ 
   (a : __rep) : Submarine__divesurfacewarnmaintain.divesurfacewarnmaintain
  requires {  (submarine__submarine__subdive__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__subdive) }
 
 predicate submarine__submarine__rt__pred 
   (a : __rep)  =
  true
 
 val rec__submarine__submarine__rt_ 
   (a : __rep) : Submarine__reactertemp.reactertemp
  requires {  (submarine__submarine__rt__pred a) }
  ensures {  (result = a.__split_fields.rec__submarine__submarine__rt) }
 
 function bool_eq 
   (a : __rep) (b : __rep) : bool =
  (if (( ( ( ( ((Submarine__doors.bool_eq a.__split_fields.rec__submarine__submarine__ds b.__split_fields.rec__submarine__submarine__ds) = True) /\ ((Submarine__oxygenlevel__rep.to_rep a.__split_fields.rec__submarine__submarine__ox) = (Submarine__oxygenlevel__rep.to_rep b.__split_fields.rec__submarine__submarine__ox)) ) /\ ((Submarine__depthlevel__rep.to_rep a.__split_fields.rec__submarine__submarine__dl) = (Submarine__depthlevel__rep.to_rep b.__split_fields.rec__submarine__submarine__dl)) ) /\ ((Submarine__divesurfacewarnmaintain__rep.to_rep a.__split_fields.rec__submarine__submarine__subdive) = (Submarine__divesurfacewarnmaintain__rep.to_rep b.__split_fields.rec__submarine__submarine__subdive)) ) /\ ((Submarine__reactertemp__rep.to_rep a.__split_fields.rec__submarine__submarine__rt) = (Submarine__reactertemp__rep.to_rep b.__split_fields.rec__submarine__submarine__rt)) )) then (
   True) else (
   False))

end

(* Module for axiomatizing type "submarine" defined at submarine.ads:39, created in Gnat2Why.Types.Translate_Type *)
module Submarine__submarine
 use export Submarine__submarine__rep
 use import "_gnatprove_standard".Main
 use import "int".Int

 type submarine =
  __rep
 
 function value__size 
   : int
 
 function object__size 
   (a : submarine) : int
 
 function value__alignment 
   : int
 
 function object__alignment 
   (a : submarine) : int
 
 axiom value__size_axiom :
  ((value__size ) >= 0)
 
 axiom object__size_axiom :
  (forall a   : submarine.
   ((object__size a) >= 0))
 
 axiom value__alignment_axiom :
  ((value__alignment ) >= 0)
 
 axiom object__alignment_axiom :
  (forall a   : submarine.
   ((object__alignment a) >= 0))
 
 function submarine__submarine__ds__first__bit 
   : int
 
 function submarine__submarine__ds__last__bit 
   : int
 
 function submarine__submarine__ds__position 
   : int
 
 axiom submarine__submarine__ds__first__bit_axiom :
  ((submarine__submarine__ds__first__bit ) >= 0)
 
 axiom submarine__submarine__ds__last__bit_axiom :
  ((submarine__submarine__ds__last__bit ) > (submarine__submarine__ds__first__bit ))
 
 axiom submarine__submarine__ds__position_axiom :
  ((submarine__submarine__ds__position ) >= 0)
 
 function submarine__submarine__ox__first__bit 
   : int
 
 function submarine__submarine__ox__last__bit 
   : int
 
 function submarine__submarine__ox__position 
   : int
 
 axiom submarine__submarine__ox__first__bit_axiom :
  ((submarine__submarine__ox__first__bit ) >= 0)
 
 axiom submarine__submarine__ox__last__bit_axiom :
  ((submarine__submarine__ox__last__bit ) > (submarine__submarine__ox__first__bit ))
 
 axiom submarine__submarine__ox__position_axiom :
  ((submarine__submarine__ox__position ) >= 0)
 
 function submarine__submarine__dl__first__bit 
   : int
 
 function submarine__submarine__dl__last__bit 
   : int
 
 function submarine__submarine__dl__position 
   : int
 
 axiom submarine__submarine__dl__first__bit_axiom :
  ((submarine__submarine__dl__first__bit ) >= 0)
 
 axiom submarine__submarine__dl__last__bit_axiom :
  ((submarine__submarine__dl__last__bit ) > (submarine__submarine__dl__first__bit ))
 
 axiom submarine__submarine__dl__position_axiom :
  ((submarine__submarine__dl__position ) >= 0)
 
 function submarine__submarine__subdive__first__bit 
   : int
 
 function submarine__submarine__subdive__last__bit 
   : int
 
 function submarine__submarine__subdive__position 
   : int
 
 axiom submarine__submarine__subdive__first__bit_axiom :
  ((submarine__submarine__subdive__first__bit ) >= 0)
 
 axiom submarine__submarine__subdive__last__bit_axiom :
  ((submarine__submarine__subdive__last__bit ) > (submarine__submarine__subdive__first__bit ))
 
 axiom submarine__submarine__subdive__position_axiom :
  ((submarine__submarine__subdive__position ) >= 0)
 
 function submarine__submarine__rt__first__bit 
   : int
 
 function submarine__submarine__rt__last__bit 
   : int
 
 function submarine__submarine__rt__position 
   : int
 
 axiom submarine__submarine__rt__first__bit_axiom :
  ((submarine__submarine__rt__first__bit ) >= 0)
 
 axiom submarine__submarine__rt__last__bit_axiom :
  ((submarine__submarine__rt__last__bit ) > (submarine__submarine__rt__first__bit ))
 
 axiom submarine__submarine__rt__position_axiom :
  ((submarine__submarine__rt__position ) >= 0)
 
 function user_eq 
   (a : submarine) (b : submarine) : bool
 
 function dummy 
   : submarine
 
 type submarine__ref =
  { mutable submarine__content "model_trace:" "name:" : submarine }
 
 function submarine__ref___projection 
   (a : submarine__ref) : submarine =
  a.submarine__content
 
 meta "model_projection" function submarine__ref___projection
 
 meta "inline : no" function submarine__ref___projection
 
 val submarine__havoc 
   (x : submarine__ref) : unit
  writes {x}

end

(* Module for axiomatizing type "T14s" defined at submarine.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoors__L13s__T14s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t14s =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t14s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t14s__ref =
  { mutable t14s__content "model_trace:" "name:" : t14s }
 
 function t14s__ref___projection 
   (a : t14s__ref) : t14s =
  a.t14s__content
 
 meta "model_projection" function t14s__ref___projection
 
 meta "inline : no" function t14s__ref___projection
 
 val t14s__havoc 
   (x : t14s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T14s" defined at submarine.ads:49, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoors__L13s__T14s__rep
 use        Submarine__closedoors__L13s__T14s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__closedoors__L13s__T14s.t14s) : int =
  (Submarine__closedoors__L13s__T14s.t14s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__closedoors__L13s__T14s.t14s, 
 predicate in_range = Submarine__closedoors__L13s__T14s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "ds" defined at submarine.ads:51, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__closedoorsinvariant__ds
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__door

 function ds #"submarine.ads" 51 0 0#"model_projected" "name:ds" "model_trace:2862" 
   : Array__Int__Submarine__door.map
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ds" defined at submarine.ads:51, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoorsinvariant__ds___axiom
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "closedoorsinvariant" defined at submarine.ads:51, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__closedoorsinvariant
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__door

 function closedoorsinvariant 
   (ds : Array__Int__Submarine__door.map) : bool
 
 predicate closedoorsinvariant__function_guard 
   (result : bool) (ds : Array__Int__Submarine__door.map) 

end

(* Module for axiomatizing type "T12s" defined at submarine.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoorsinvariant__L11s__T12s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t12s =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t12s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t12s__ref =
  { mutable t12s__content "model_trace:" "name:" : t12s }
 
 function t12s__ref___projection 
   (a : t12s__ref) : t12s =
  a.t12s__content
 
 meta "model_projection" function t12s__ref___projection
 
 meta "inline : no" function t12s__ref___projection
 
 val t12s__havoc 
   (x : t12s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T12s" defined at submarine.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoorsinvariant__L11s__T12s__rep
 use        Submarine__closedoorsinvariant__L11s__T12s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__closedoorsinvariant__L11s__T12s.t12s) : int =
  (Submarine__closedoorsinvariant__L11s__T12s.t12s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__closedoorsinvariant__L11s__T12s.t12s, 
 predicate in_range = Submarine__closedoorsinvariant__L11s__T12s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for axiomatizing type "T5s" defined at submarine.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoorsinvariant__L4s__T5s
 use import "_gnatprove_standard".Main
 use import "int".Int

 type t5s =
  < range 1 2 >
 
 function first 
   : int =
  1
 
 function last 
   : int =
  2
 
 predicate in_range 
   (x : int)  =
  ( (first <= x) /\ (x <= last) )
 
 clone export "ada__model".Static_Discrete with
 type t = t5s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range
 
 type t5s__ref =
  { mutable t5s__content "model_trace:" "name:" : t5s }
 
 function t5s__ref___projection 
   (a : t5s__ref) : t5s =
  a.t5s__content
 
 meta "model_projection" function t5s__ref___projection
 
 meta "inline : no" function t5s__ref___projection
 
 val t5s__havoc 
   (x : t5s__ref) : unit
  writes {x}

end

(* Module defining to_rep/of_rep for type "T5s" defined at submarine.ads:52, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoorsinvariant__L4s__T5s__rep
 use        Submarine__closedoorsinvariant__L4s__T5s
 use import "_gnatprove_standard".Main

 function to_rep 
   (x : Submarine__closedoorsinvariant__L4s__T5s.t5s) : int =
  (Submarine__closedoorsinvariant__L4s__T5s.t5s'int x)
 
 clone export "ada__model".Rep_Proj_Int with
 type t = Submarine__closedoorsinvariant__L4s__T5s.t5s, 
 predicate in_range = Submarine__closedoorsinvariant__L4s__T5s.in_range, 
 function to_rep = to_rep
 
 meta "model_projection" function to_rep
 
 meta "inline : no" function to_rep

end

(* Module for defining the constant "R1b" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__closedoors__L_1__R1b
 use import "_gnatprove_standard".Main

 function r1b #"submarine.adb" 10 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for defining the constant "R2b" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Constant *)
module Submarine__closedoors__L_1__R2b
 use import "_gnatprove_standard".Main

 function r2b #"submarine.adb" 10 0 0#
   : int
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module for axiomatizing type "T3b" defined at submarine.adb:10, created in Gnat2Why.Types.Translate_Type *)
module Submarine__closedoors__L_1__T3b
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__Tdr_indexB
 use        Submarine__Tdr_indexB__rep

 type t3b =
  Submarine__Tdr_indexB.tdr_indexB
 
 predicate dynamic_property 
   (first_int : int) (last_int : int) (x : int)  =
  ( (first_int <= x) /\ (x <= last_int) )
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t3b, 
 type rep_type = int, 
 function base_to_rep = Submarine__Tdr_indexB__rep.to_rep, 
 function base_of_rep = Submarine__Tdr_indexB__rep.of_rep, 
 predicate dynamic_property = dynamic_property
 
 type t3b__ref =
  { mutable t3b__content "model_trace:" "name:" : t3b }
 
 function t3b__ref___projection 
   (a : t3b__ref) : t3b =
  a.t3b__content
 
 meta "model_projection" function t3b__ref___projection
 
 meta "inline : no" function t3b__ref___projection
 
 val t3b__havoc 
   (x : t3b__ref) : unit
  writes {x}

end
(* Module for defining a ref holding the value of variable "ds" defined at submarine.ads:48, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__closedoors__ds
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__door

 val ds #"submarine.ads" 48 0 0#"model_projected" "name:ds" "model_trace:2812"  : Array__Int__Submarine__door.map__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "ds" defined at submarine.ads:48, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoors__ds___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sub" defined at submarine.ads:55, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__divesub__sub
 use import "_gnatprove_standard".Main
 use        Submarine__submarine

 val sub__split_fields #"submarine.ads" 55 0 0#"model_projected" "model_trace:2909" "name:sub"  : Submarine__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "sub" defined at submarine.ads:55, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__divesub__sub___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sub" defined at submarine.ads:60, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__resurfacesub__sub
 use import "_gnatprove_standard".Main
 use        Submarine__submarine

 val sub__split_fields #"submarine.ads" 60 0 0#"model_projected" "name:sub" "model_trace:2961"  : Submarine__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "sub" defined at submarine.ads:60, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__resurfacesub__sub___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "sub" defined at submarine.ads:64, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__warnsub__sub
 use import "_gnatprove_standard".Main
 use        Submarine__submarine

 val sub__split_fields #"submarine.ads" 64 0 0#"model_projected" "name:sub" "model_trace:3000"  : Submarine__submarine.__split_fields__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "sub" defined at submarine.ads:64, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__warnsub__sub___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "a" defined at submarine.adb:7, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__closedoors__a
 use import "_gnatprove_standard".Main

 val a #"submarine.adb" 7 0 0#"model_projected" "model_trace:2325" "name:a"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "a" defined at submarine.adb:7, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoors__a___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "b" defined at submarine.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__closedoors__b
 use import "_gnatprove_standard".Main

 val b #"submarine.adb" 8 0 0#"model_projected" "model_trace:2337" "name:b"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "b" defined at submarine.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoors__b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Variable *)
module Submarine__closedoors__L_1__i
 use import "_gnatprove_standard".Main

 val i #"submarine.adb" 10 0 0#"model_projected" "model_trace:2352" "name:I"  : int__ref 
 
 function attr__ATTRIBUTE_ADDRESS 
   : int

end

(* Module giving an empty axiom for the entity "i" defined at submarine.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoors__L_1__i___axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for type "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_4 : int) (temp___is_init_0 : bool) (temp___skip_constant_1 : bool) (temp___do_toplevel_2 : bool) (temp___do_typ_inv_3 : bool)  =
  (if (( temp___is_init_0 \/ (Standard__short_short_integer.first <= Standard__short_short_integer.last) )) then (
   (Standard__short_short_integer.dynamic_property Standard__short_short_integer.first Standard__short_short_integer.last temp___expr_4)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_5 : int) (temp___skip_top_level_6 : bool)  =
  true

end

(* Module giving axioms for type "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__short_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_11 : int) (temp___is_init_7 : bool) (temp___skip_constant_8 : bool) (temp___do_toplevel_9 : bool) (temp___do_typ_inv_10 : bool)  =
  (if (( temp___is_init_7 \/ (Standard__short_integer.first <= Standard__short_integer.last) )) then (
   (Standard__short_integer.dynamic_property Standard__short_integer.first Standard__short_integer.last temp___expr_11)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_12 : int) (temp___skip_top_level_13 : bool)  =
  true

end

(* Module giving axioms for type "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer

 predicate dynamic_invariant "inline" 
   (temp___expr_18 : int) (temp___is_init_14 : bool) (temp___skip_constant_15 : bool) (temp___do_toplevel_16 : bool) (temp___do_typ_inv_17 : bool)  =
  (if (( temp___is_init_14 \/ (Standard__integer.first <= Standard__integer.last) )) then (
   (Standard__integer.dynamic_property Standard__integer.first Standard__integer.last temp___expr_18)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_19 : int) (temp___skip_top_level_20 : bool)  =
  true

end

(* Module giving axioms for type "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_25 : int) (temp___is_init_21 : bool) (temp___skip_constant_22 : bool) (temp___do_toplevel_23 : bool) (temp___do_typ_inv_24 : bool)  =
  (if (( temp___is_init_21 \/ (Standard__long_integer.first <= Standard__long_integer.last) )) then (
   (Standard__long_integer.dynamic_property Standard__long_integer.first Standard__long_integer.last temp___expr_25)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_26 : int) (temp___skip_top_level_27 : bool)  =
  true

end

(* Module giving axioms for type "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__long_long_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_32 : int) (temp___is_init_28 : bool) (temp___skip_constant_29 : bool) (temp___do_toplevel_30 : bool) (temp___do_typ_inv_31 : bool)  =
  (if (( temp___is_init_28 \/ (Standard__long_long_integer.first <= Standard__long_long_integer.last) )) then (
   (Standard__long_long_integer.dynamic_property Standard__long_long_integer.first Standard__long_long_integer.last temp___expr_32)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_33 : int) (temp___skip_top_level_34 : bool)  =
  true

end

(* Module giving axioms for type "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__natural

 predicate dynamic_invariant "inline" 
   (temp___expr_39 : int) (temp___is_init_35 : bool) (temp___skip_constant_36 : bool) (temp___do_toplevel_37 : bool) (temp___do_typ_inv_38 : bool)  =
  (if (( temp___is_init_35 \/ (Standard__natural.first <= Standard__natural.last) )) then (
   (Standard__natural.dynamic_property Standard__natural.first Standard__natural.last temp___expr_39)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_40 : int) (temp___skip_top_level_41 : bool)  =
  true

end

(* Module giving axioms for type "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_46 : int) (temp___is_init_42 : bool) (temp___skip_constant_43 : bool) (temp___do_toplevel_44 : bool) (temp___do_typ_inv_45 : bool)  =
  (if (( temp___is_init_42 \/ (Standard__positive.first <= Standard__positive.last) )) then (
   (Standard__positive.dynamic_property Standard__positive.first Standard__positive.last temp___expr_46)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_47 : int) (temp___skip_top_level_48 : bool)  =
  true

end

(* Module giving axioms for type "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__short_float

 predicate dynamic_invariant "inline" 
   (temp___expr_53 : Float32.t) (temp___is_init_49 : bool) (temp___skip_constant_50 : bool) (temp___do_toplevel_51 : bool) (temp___do_typ_inv_52 : bool)  =
  (if (( temp___is_init_49 \/ (Float32.le Standard__short_float.first Standard__short_float.last) )) then (
   (Standard__short_float.dynamic_property Standard__short_float.first Standard__short_float.last temp___expr_53)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_54 : Float32.t) (temp___skip_top_level_55 : bool)  =
  true

end

(* Module giving axioms for type "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float32
 use        Standard__float

 predicate dynamic_invariant "inline" 
   (temp___expr_60 : Float32.t) (temp___is_init_56 : bool) (temp___skip_constant_57 : bool) (temp___do_toplevel_58 : bool) (temp___do_typ_inv_59 : bool)  =
  (if (( temp___is_init_56 \/ (Float32.le Standard__float.first Standard__float.last) )) then (
   (Standard__float.dynamic_property Standard__float.first Standard__float.last temp___expr_60)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_61 : Float32.t) (temp___skip_top_level_62 : bool)  =
  true

end

(* Module giving axioms for type "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float___axiom
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Float64
 use        Standard__long_float

 predicate dynamic_invariant "inline" 
   (temp___expr_67 : Float64.t) (temp___is_init_63 : bool) (temp___skip_constant_64 : bool) (temp___do_toplevel_65 : bool) (temp___do_typ_inv_66 : bool)  =
  (if (( temp___is_init_63 \/ (Float64.le Standard__long_float.first Standard__long_float.last) )) then (
   (Standard__long_float.dynamic_property Standard__long_float.first Standard__long_float.last temp___expr_67)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_68 : Float64.t) (temp___skip_top_level_69 : bool)  =
  true

end

(* Module giving axioms for type "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__character

 predicate dynamic_invariant "inline" 
   (temp___expr_74 : int) (temp___is_init_70 : bool) (temp___skip_constant_71 : bool) (temp___do_toplevel_72 : bool) (temp___do_typ_inv_73 : bool)  =
  (if (( temp___is_init_70 \/ (Standard__character.first <= Standard__character.last) )) then (
   (Standard__character.dynamic_property Standard__character.first Standard__character.last temp___expr_74)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_75 : int) (temp___skip_top_level_76 : bool)  =
  true

end

(* Module giving axioms for type "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_81 : int) (temp___is_init_77 : bool) (temp___skip_constant_78 : bool) (temp___do_toplevel_79 : bool) (temp___do_typ_inv_80 : bool)  =
  (if (( temp___is_init_77 \/ (Standard__wide_character.first <= Standard__wide_character.last) )) then (
   (Standard__wide_character.dynamic_property Standard__wide_character.first Standard__wide_character.last temp___expr_81)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_82 : int) (temp___skip_top_level_83 : bool)  =
  true

end

(* Module giving axioms for type "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__wide_wide_character

 predicate dynamic_invariant "inline" 
   (temp___expr_88 : int) (temp___is_init_84 : bool) (temp___skip_constant_85 : bool) (temp___do_toplevel_86 : bool) (temp___do_typ_inv_87 : bool)  =
  (if (( temp___is_init_84 \/ (Standard__wide_wide_character.first <= Standard__wide_wide_character.last) )) then (
   (Standard__wide_wide_character.dynamic_property Standard__wide_wide_character.first Standard__wide_wide_character.last temp___expr_88)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_89 : int) (temp___skip_top_level_90 : bool)  =
  true

end

(* Module giving axioms for type "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__string
 use        Standard__positive

 predicate dynamic_invariant "inline" 
   (temp___expr_96 : Standard__string.string) (temp___is_init_92 : bool) (temp___skip_constant_93 : bool) (temp___do_toplevel_94 : bool) (temp___do_typ_inv_95 : bool)  =
  (if (temp___skip_constant_93) then (
   true) else (
   (Standard__string.dynamic_property Standard__positive.first Standard__positive.last (Standard__string.first temp___expr_96) (Standard__string.last temp___expr_96))))

end

(* Module giving axioms for type "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_103 : Standard__wide_string.wide_string) (temp___is_init_99 : bool) (temp___skip_constant_100 : bool) (temp___do_toplevel_101 : bool) (temp___do_typ_inv_102 : bool)  =
  (if (temp___skip_constant_100) then (
   true) else (
   (Standard__wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_string.first temp___expr_103) (Standard__wide_string.last temp___expr_103))))

end

(* Module giving axioms for type "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string___axiom
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_string

 predicate dynamic_invariant "inline" 
   (temp___expr_110 : Standard__wide_wide_string.wide_wide_string) (temp___is_init_106 : bool) (temp___skip_constant_107 : bool) (temp___do_toplevel_108 : bool) (temp___do_typ_inv_109 : bool)  =
  (if (temp___skip_constant_107) then (
   true) else (
   (Standard__wide_wide_string.dynamic_property Standard__positive.first Standard__positive.last (Standard__wide_wide_string.first temp___expr_110) (Standard__wide_wide_string.last temp___expr_110))))

end

(* Module giving axioms for type "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration___axiom
 use import "_gnatprove_standard".Main
 use        Standard__duration

 predicate dynamic_invariant "inline" 
   (temp___expr_116 : Standard__duration.duration) (temp___is_init_112 : bool) (temp___skip_constant_113 : bool) (temp___do_toplevel_114 : bool) (temp___do_typ_inv_115 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_117 : Standard__duration.duration) (temp___skip_top_level_118 : bool)  =
  true

end

(* Module giving axioms for type "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_8

 predicate dynamic_invariant "inline" 
   (temp___expr_123 : int) (temp___is_init_119 : bool) (temp___skip_constant_120 : bool) (temp___do_toplevel_121 : bool) (temp___do_typ_inv_122 : bool)  =
  (if (( temp___is_init_119 \/ (Standard__integer_8.first <= Standard__integer_8.last) )) then (
   (Standard__integer_8.dynamic_property Standard__integer_8.first Standard__integer_8.last temp___expr_123)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_124 : int) (temp___skip_top_level_125 : bool)  =
  true

end

(* Module giving axioms for type "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_16

 predicate dynamic_invariant "inline" 
   (temp___expr_130 : int) (temp___is_init_126 : bool) (temp___skip_constant_127 : bool) (temp___do_toplevel_128 : bool) (temp___do_typ_inv_129 : bool)  =
  (if (( temp___is_init_126 \/ (Standard__integer_16.first <= Standard__integer_16.last) )) then (
   (Standard__integer_16.dynamic_property Standard__integer_16.first Standard__integer_16.last temp___expr_130)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_131 : int) (temp___skip_top_level_132 : bool)  =
  true

end

(* Module giving axioms for type "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_32

 predicate dynamic_invariant "inline" 
   (temp___expr_137 : int) (temp___is_init_133 : bool) (temp___skip_constant_134 : bool) (temp___do_toplevel_135 : bool) (temp___do_typ_inv_136 : bool)  =
  (if (( temp___is_init_133 \/ (Standard__integer_32.first <= Standard__integer_32.last) )) then (
   (Standard__integer_32.dynamic_property Standard__integer_32.first Standard__integer_32.last temp___expr_137)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_138 : int) (temp___skip_top_level_139 : bool)  =
  true

end

(* Module giving axioms for type "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__integer_64

 predicate dynamic_invariant "inline" 
   (temp___expr_144 : int) (temp___is_init_140 : bool) (temp___skip_constant_141 : bool) (temp___do_toplevel_142 : bool) (temp___do_typ_inv_143 : bool)  =
  (if (( temp___is_init_140 \/ (Standard__integer_64.first <= Standard__integer_64.last) )) then (
   (Standard__integer_64.dynamic_property Standard__integer_64.first Standard__integer_64.last temp___expr_144)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_145 : int) (temp___skip_top_level_146 : bool)  =
  true

end

(* Module giving axioms for type "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Standard__universal_integer

 predicate dynamic_invariant "inline" 
   (temp___expr_151 : int) (temp___is_init_147 : bool) (temp___skip_constant_148 : bool) (temp___do_toplevel_149 : bool) (temp___do_typ_inv_150 : bool)  =
  (if (( temp___is_init_147 \/ (Standard__universal_integer.first <= Standard__universal_integer.last) )) then (
   (Standard__universal_integer.dynamic_property Standard__universal_integer.first Standard__universal_integer.last temp___expr_151)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_152 : int) (temp___skip_top_level_153 : bool)  =
  true

end

(* Module for possibly declaring a logic function for "closedoors" defined at submarine.ads:48, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__closedoors
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "divesub" defined at submarine.ads:55, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__divesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "resurfacesub" defined at submarine.ads:60, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__resurfacesub
 use import "_gnatprove_standard".Main


end

(* Module for possibly declaring a logic function for "warnsub" defined at submarine.ads:64, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Submarine__warnsub
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_1" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__closedoors__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at submarine.adb:10, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__closedoors__L_1___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the loop exit exception for the loop "L_2" defined at submarine.adb:20, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Submarine__divesub__L_2
 use import "_gnatprove_standard".Main

 exception L_2

end

(* Module giving an empty axiom for the entity "L_2" defined at submarine.adb:20, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Submarine__divesub__L_2___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "doorclosedopen" defined at submarine.ads:4, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__doorclosedopen___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__doorclosedopen

 predicate dynamic_invariant "inline" 
   (temp___expr_159 : int) (temp___is_init_155 : bool) (temp___skip_constant_156 : bool) (temp___do_toplevel_157 : bool) (temp___do_typ_inv_158 : bool)  =
  (if (( temp___is_init_155 \/ (Submarine__doorclosedopen.first <= Submarine__doorclosedopen.last) )) then (
   (Submarine__doorclosedopen.dynamic_property Submarine__doorclosedopen.first Submarine__doorclosedopen.last temp___expr_159)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_160 : int) (temp___skip_top_level_161 : bool)  =
  true

end

(* Module giving axioms for type "locklockedunlocked" defined at submarine.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__locklockedunlocked___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__locklockedunlocked

 predicate dynamic_invariant "inline" 
   (temp___expr_166 : int) (temp___is_init_162 : bool) (temp___skip_constant_163 : bool) (temp___do_toplevel_164 : bool) (temp___do_typ_inv_165 : bool)  =
  (if (( temp___is_init_162 \/ (Submarine__locklockedunlocked.first <= Submarine__locklockedunlocked.last) )) then (
   (Submarine__locklockedunlocked.dynamic_property Submarine__locklockedunlocked.first Submarine__locklockedunlocked.last temp___expr_166)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_167 : int) (temp___skip_top_level_168 : bool)  =
  true

end

(* Module giving axioms for type "divesurfacewarnmaintain" defined at submarine.ads:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__divesurfacewarnmaintain___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__divesurfacewarnmaintain

 predicate dynamic_invariant "inline" 
   (temp___expr_173 : int) (temp___is_init_169 : bool) (temp___skip_constant_170 : bool) (temp___do_toplevel_171 : bool) (temp___do_typ_inv_172 : bool)  =
  (if (( temp___is_init_169 \/ (Submarine__divesurfacewarnmaintain.first <= Submarine__divesurfacewarnmaintain.last) )) then (
   (Submarine__divesurfacewarnmaintain.dynamic_property Submarine__divesurfacewarnmaintain.first Submarine__divesurfacewarnmaintain.last temp___expr_173)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_174 : int) (temp___skip_top_level_175 : bool)  =
  true

end

(* Module giving axioms for type "reactertemp" defined at submarine.ads:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__reactertemp___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__reactertemp

 predicate dynamic_invariant "inline" 
   (temp___expr_180 : int) (temp___is_init_176 : bool) (temp___skip_constant_177 : bool) (temp___do_toplevel_178 : bool) (temp___do_typ_inv_179 : bool)  =
  (if (( temp___is_init_176 \/ (Submarine__reactertemp.first <= Submarine__reactertemp.last) )) then (
   (Submarine__reactertemp.dynamic_property Submarine__reactertemp.first Submarine__reactertemp.last temp___expr_180)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_181 : int) (temp___skip_top_level_182 : bool)  =
  true

end

(* Module giving axioms for type "lock" defined at submarine.ads:16, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__lock___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__lock

 predicate dynamic_invariant "inline" 
   (temp___expr_187 : Submarine__lock.lock) (temp___is_init_183 : bool) (temp___skip_constant_184 : bool) (temp___do_toplevel_185 : bool) (temp___do_typ_inv_186 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_188 : Submarine__lock.lock) (temp___skip_top_level_189 : bool)  =
  true

end

(* Module giving axioms for type "door" defined at submarine.ads:21, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__door___axiom
 use import "_gnatprove_standard".Main
 use        Submarine__door

 predicate dynamic_invariant "inline" 
   (temp___expr_195 : Submarine__door.door) (temp___is_init_191 : bool) (temp___skip_constant_192 : bool) (temp___do_toplevel_193 : bool) (temp___do_typ_inv_194 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_196 : Submarine__door.door) (temp___skip_top_level_197 : bool)  =
  true

end

(* Module giving axioms for type "Tdr_indexB" defined at submarine.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__Tdr_indexB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "dr_index" defined at submarine.ads:27, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__dr_index___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__dr_index

 predicate dynamic_invariant "inline" 
   (temp___expr_205 : int) (temp___is_init_201 : bool) (temp___skip_constant_202 : bool) (temp___do_toplevel_203 : bool) (temp___do_typ_inv_204 : bool)  =
  (if (( temp___is_init_201 \/ (Submarine__dr_index.first <= Submarine__dr_index.last) )) then (
   (Submarine__dr_index.dynamic_property Submarine__dr_index.first Submarine__dr_index.last temp___expr_205)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_206 : int) (temp___skip_top_level_207 : bool)  =
  true

end

(* Module giving axioms for type "TdoorsB" defined at submarine.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TdoorsB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "doors" defined at submarine.ads:30, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__doors___axiom
 use import "_gnatprove_standard".Main
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door

 predicate dynamic_invariant "inline" 
   (temp___expr_212 : Array__Int__Submarine__door.map) (temp___is_init_208 : bool) (temp___skip_constant_209 : bool) (temp___do_toplevel_210 : bool) (temp___do_typ_inv_211 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_214 : Array__Int__Submarine__door.map) (temp___skip_top_level_215 : bool)  =
  true

end

(* Module giving axioms for type "ToxygenlevelB" defined at submarine.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__ToxygenlevelB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "oxygenlevel" defined at submarine.ads:33, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__oxygenlevel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__oxygenlevel

 predicate dynamic_invariant "inline" 
   (temp___expr_225 : int) (temp___is_init_221 : bool) (temp___skip_constant_222 : bool) (temp___do_toplevel_223 : bool) (temp___do_typ_inv_224 : bool)  =
  (if (( temp___is_init_221 \/ (Submarine__oxygenlevel.first <= Submarine__oxygenlevel.last) )) then (
   (Submarine__oxygenlevel.dynamic_property Submarine__oxygenlevel.first Submarine__oxygenlevel.last temp___expr_225)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_226 : int) (temp___skip_top_level_227 : bool)  =
  true

end

(* Module giving axioms for type "TdepthlevelB" defined at submarine.ads:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__TdepthlevelB___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "depthlevel" defined at submarine.ads:36, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__depthlevel___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__depthlevel

 predicate dynamic_invariant "inline" 
   (temp___expr_232 : int) (temp___is_init_228 : bool) (temp___skip_constant_229 : bool) (temp___do_toplevel_230 : bool) (temp___do_typ_inv_231 : bool)  =
  (if (( temp___is_init_228 \/ (Submarine__depthlevel.first <= Submarine__depthlevel.last) )) then (
   (Submarine__depthlevel.dynamic_property Submarine__depthlevel.first Submarine__depthlevel.last temp___expr_232)) else true)
 
 predicate default_initial_assumption "inline" 
   (temp___expr_233 : int) (temp___skip_top_level_234 : bool)  =
  true

end

(* Module giving axioms for type "submarine" defined at submarine.ads:39, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__submarine___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Submarine__submarine

 predicate dynamic_invariant "inline" 
   (temp___expr_239 : Submarine__submarine.submarine) (temp___is_init_235 : bool) (temp___skip_constant_236 : bool) (temp___do_toplevel_237 : bool) (temp___do_typ_inv_238 : bool)  =
  true
 
 predicate default_initial_assumption "inline" 
   (temp___expr_241 : Submarine__submarine.submarine) (temp___skip_top_level_242 : bool)  =
  ( (if ((Submarine__submarine.submarine__submarine__ox__pred temp___expr_241)) then (
   ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields temp___expr_241))) = 6)) else true) /\ (if ((Submarine__submarine.submarine__submarine__dl__pred temp___expr_241)) then (
   ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields temp___expr_241))) = 6)) else true) )

end

(* Module giving axioms for type "T14s" defined at submarine.ads:49, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__closedoors__L13s__T14s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T12s" defined at submarine.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__closedoorsinvariant__L11s__T12s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T5s" defined at submarine.ads:52, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__closedoorsinvariant__L4s__T5s___axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for type "T3b" defined at submarine.adb:10, created in Gnat2Why.Types.Generate_Type_Completion *)
module Submarine__closedoors__L_1__T3b___axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the value of constant "R1b" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__closedoors__L_1__R1b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining the value of constant "R2b" defined at submarine.adb:10, created in Gnat2Why.Decls.Translate_Constant_Value *)
module Submarine__closedoors__L_1__R2b___axiom
 use import "_gnatprove_standard".Main


end

(* Module for declaring a program function (and possibly an axiom) for "closedoors" defined at submarine.ads:48, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__closedoors___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__doorclosedopen
 use        Submarine__doorclosedopen__rep
 use        Submarine__locklockedunlocked
 use        Submarine__locklockedunlocked__rep
 use        Submarine__lock
 use        Submarine__door
 use        Array__Int__Submarine__door
 use        Submarine__doors___axiom
 use        Array__Int__Submarine__door

 val closedoors 
   (ds : Array__Int__Submarine__door.map__ref) : unit
  requires {  true }
  ensures {  ( (forall j   "model" "model_trace:2828" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= 2) ) -> ( ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds.Array__Int__Submarine__door.map__content j)))) = 0) /\ ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds.Array__Int__Submarine__door.map__content j)))))) = 0) ) )) /\ (Submarine__doors___axiom.dynamic_invariant ds.Array__Int__Submarine__door.map__content True True True True) ) }
  writes {ds}

end

(* Module giving a program function and a defining axiom for the expression function "closedoorsinvariant" defined at submarine.ads:51, created in Gnat2Why.Subprograms.Translate_Expression_Function_Body *)
module Submarine__closedoorsinvariant___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__closedoorsinvariant
 use        Submarine__doorclosedopen
 use        Submarine__doorclosedopen__rep
 use        Submarine__locklockedunlocked
 use        Submarine__locklockedunlocked__rep
 use        Submarine__lock
 use        Submarine__door
 use        Array__Int__Submarine__door
 use        Submarine__doors___axiom
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door

 val closedoorsinvariant 
   (ds : Array__Int__Submarine__door.map) : bool
  requires {  true }
  ensures {  ( ( (result = (Submarine__closedoorsinvariant.closedoorsinvariant ds)) /\ (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard result ds) ) /\ ( (result = True) <-> (forall j   "model" "name:J" "model_trace:2875"  : int.
   ( ( (1 <= j) /\ (j <= 2) ) -> ( ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds j)))) = 0) /\ ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds j)))))) = 0) ) )) ) ) }
 
 axiom closedoorsinvariant__post_axiom :
  (forall ds   : Array__Int__Submarine__door.map [(Submarine__closedoorsinvariant.closedoorsinvariant ds)].
   ( (Submarine__doors___axiom.dynamic_invariant ds True True True True) -> (let result = (Submarine__closedoorsinvariant.closedoorsinvariant ds) in (
    (if ((Submarine__closedoorsinvariant.closedoorsinvariant__function_guard result ds)) then (
     ( ( true /\ true ) /\ true )) else true)))
    ))
 
 axiom closedoorsinvariant__def_axiom :
  (forall ds   : Array__Int__Submarine__door.map [(Submarine__closedoorsinvariant.closedoorsinvariant ds)].
   ( (let result = (Submarine__closedoorsinvariant.closedoorsinvariant ds) in (
    (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard result ds)))
    -> ( ((Submarine__closedoorsinvariant.closedoorsinvariant ds) = True) <-> (forall j   "model" "name:J" "model_trace:2875"  : int.
    ( ( (1 <= j) /\ (j <= 2) ) -> ( ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds j)))) = 0) /\ ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get ds j)))))) = 0) ) )) ) ))

end

(* Module for declaring a program function (and possibly an axiom) for "divesub" defined at submarine.ads:55, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__divesub___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__closedoorsinvariant
 use        Submarine__reactertemp
 use        Submarine__reactertemp__rep
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door

 val divesub 
   (sub__split_fields : Submarine__submarine.__split_fields__ref) : unit
  requires {  ((epsilon temp___result_255 : bool.
   ( (temp___result_255 = (Submarine__closedoorsinvariant.closedoorsinvariant (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content })))) /\ (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard temp___result_255 (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) )) = True) }
  ensures {  ( ( ( ( ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) >= 3) /\ ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) >= 3) ) /\ ((Submarine__reactertemp__rep.to_rep (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) <> 0) ) /\ ((epsilon temp___result_256 : bool.
   ( (temp___result_256 = (Submarine__closedoorsinvariant.closedoorsinvariant (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content })))) /\ (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard temp___result_256 (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) )) = True) ) /\ (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content } True True True True) ) }
  writes {sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "resurfacesub" defined at submarine.ads:60, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__resurfacesub___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__reactertemp
 use        Submarine__reactertemp__rep
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom

 val resurfacesub 
   (sub__split_fields : Submarine__submarine.__split_fields__ref) : unit
  requires {  ( ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) < 6) /\ ( ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) = 0) \/ ((Submarine__reactertemp__rep.to_rep (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) = 0) ) ) }
  ensures {  (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content } True True True True) }
  writes {sub__split_fields}

end

(* Module for declaring a program function (and possibly an axiom) for "warnsub" defined at submarine.ads:64, created in Gnat2Why.Subprograms.Generate_Subprogram_Completion *)
module Submarine__warnsub___axiom
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom

 val warnsub 
   (sub__split_fields : Submarine__submarine.__split_fields__ref) : unit
  requires {  ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content }))) < 4) }
  ensures {  (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = sub__split_fields.Submarine__submarine.__split_fields__content } True True True True) }
  writes {sub__split_fields}

end

(* Module for checking absence of run-time errors and package initial condition on package elaboration of "submarine" defined at submarine.ads:1, created in Gnat2Why.Subprograms.Generate_VCs_For_Package_Elaboration *)
module Submarine__package_def
 use import "_gnatprove_standard".Main

 let def #"submarine.ads" 1 0 0#"GP_Subp:submarine.ads:1" "W:diverges:N" 
   (__void_param : unit)
  requires { #"submarine.ads" 1 0 0# true }
  ensures { #"submarine.ads" 1 0 0# true }
   =
  ( (#"submarine.ads" 1 0 0# ());
  (#"submarine.ads" 4 0 0# ());
  (#"submarine.ads" 7 0 0# ());
  (#"submarine.ads" 10 0 0# ());
  (#"submarine.ads" 13 0 0# ());
  (#"submarine.ads" 16 0 0# ());
  (#"submarine.ads" 21 0 0# ());
  (#"submarine.ads" 27 0 0# ());
  (#"submarine.ads" 30 0 0# ());
  (#"submarine.ads" 33 0 0# ());
  (#"submarine.ads" 33 0 0# ());
  (#"submarine.ads" 36 0 0# ());
  (#"submarine.ads" 36 0 0# ());
  (#"submarine.ads" 39 0 0# ());
  (#"submarine.ads" 39 0 0# ());
  (#"submarine.ads" 39 0 0# ());
  (#"submarine.ads" 48 0 0# ());
  (#"submarine.ads" 49 0 0# ());
  (#"submarine.ads" 52 0 0# ());
  (#"submarine.ads" 52 0 0# ());
  (#"submarine.ads" 52 0 0# ());
  (#"submarine.ads" 52 0 0# ());
  (#"submarine.ads" 51 0 0# ());
  (#"submarine.ads" 55 0 0# ());
  (#"submarine.ads" 57 0 0# ());
  (#"submarine.ads" 56 0 0# ());
  (#"submarine.ads" 60 0 0# ());
  (#"submarine.ads" 61 0 0# ());
  (#"submarine.ads" 64 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 65 0 0# ());
  (#"submarine.ads" 51 0 0# ());
  (#"submarine.adb" 1 0 0# ());
  (#"submarine.adb" 6 0 0# ());
  (#"submarine.adb" 16 0 0# ());
  (#"submarine.adb" 29 0 0# ());
  (#"submarine.adb" 34 0 0# ());
  ( "GP_Sloc:submarine.adb:42:1" (#"submarine.adb" 42 0 0# ()) ) )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closedoors" defined at submarine.ads:48, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__closedoors__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__doorclosedopen
 use        Submarine__doorclosedopen__rep
 use        Submarine__locklockedunlocked
 use        Submarine__locklockedunlocked__rep
 use        Submarine__lock
 use        Submarine__door
 use        Submarine__dr_index___axiom
 use        Array__Int__Submarine__door
 use        Submarine__doors___axiom
 use        Array__Int__Submarine__door
 use        Submarine__closedoors__ds
 use        Submarine__closedoors__a
 use        Submarine__closedoors__b
 use        Submarine__closedoors__L_1__R1b
 use        Submarine__closedoors__L_1__R2b
 use        Submarine__closedoors__L_1
 use        Submarine__closedoors__L_1__i
 use        Submarine__closedoors__a___axiom
 use        Submarine__closedoors__b___axiom
 use        Submarine__closedoors__L_1__i___axiom
 use        Submarine__closedoors__L_1___axiom
 use        Submarine__doorclosedopen___axiom
 use        Submarine__locklockedunlocked___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__dr_index___axiom
 use        Submarine__doors___axiom
 use        Submarine__closedoors__ds___axiom
 use        Submarine__closedoors__L_1__R1b___axiom
 use        Submarine__closedoors__L_1__R2b___axiom

 let def #"submarine.ads" 48 0 0#"W:diverges:N" "GP_Subp:submarine.ads:48" 
   (__void_param : unit)
  requires { #"submarine.ads" 48 0 0# true }
  ensures { #"submarine.ads" 48 0 0# (#"submarine.ads" 49 0 0# ( "model_vc_post" "keep_on_simp" "GP_Sloc:submarine.ads:49:14" "GP_Reason:VC_POSTCONDITION" "GP_Id:0" "comment:     Post => (for all J in ds'Range => ds(J).doorStatus = Closed and then ds(J).alock.lockStatus = Locked);
             ^ submarine.ads:49:14:VC_POSTCONDITION" "GP_Shape:pragargs__forall" (forall j #"submarine.ads" 49 0 0#  "model" "model_trace:2828" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= 2) ) -> ( ( "GP_Pretty_Ada:2844" "GP_Sloc:submarine.ads:49:40" ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content j)))) = 0) ) /\ ( "GP_Pretty_Ada:2854" "GP_Sloc:submarine.ads:49:75" ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content j)))))) = 0) ) ) )) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:48 *)
  ;
   assume {  (Submarine__doors___axiom.dynamic_invariant Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:48 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:48 *)
  ;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:48 *)
  ;
   assume {  true };
   try
   ( (#"submarine.adb" 7 0 0# ( #"submarine.adb" 7 0 0# Submarine__closedoors__a.a.int__content <- ( 1 );
   #"submarine.adb" 7 0 0# assume { #"submarine.adb" 7 0 0# (Submarine__dr_index___axiom.dynamic_invariant Submarine__closedoors__a.a.int__content True False True True) } ));
   (#"submarine.adb" 8 0 0# ( #"submarine.adb" 8 0 0# Submarine__closedoors__b.b.int__content <- ( 2 );
   #"submarine.adb" 8 0 0# assume { #"submarine.adb" 8 0 0# (Submarine__dr_index___axiom.dynamic_invariant Submarine__closedoors__b.b.int__content True False True True) } ));
   (#"submarine.adb" 10 0 0# ());
   ( "GP_Sloc:submarine.adb:10:16" (#"submarine.adb" 10 0 0# ()) );
   ( "GP_Sloc:submarine.adb:10:19" (#"submarine.adb" 10 0 0# ()) );
   ( "GP_Sloc:submarine.adb:10:16" (#"submarine.adb" 10 0 0# (#"submarine.adb" 10 0 0# ( (let submarine__closedoors__L_1__R1b__assume = Submarine__closedoors__a.a.int__content in (
    #"submarine.adb" 10 0 0# assume { #"submarine.adb" 10 0 0# (submarine__closedoors__L_1__R1b__assume = Submarine__closedoors__L_1__R1b.r1b) }))
   ;
   #"submarine.adb" 10 0 0# assume { #"submarine.adb" 10 0 0# (Submarine__dr_index___axiom.dynamic_invariant Submarine__closedoors__L_1__R1b.r1b True False True True) } ))) );
   ( "GP_Sloc:submarine.adb:10:19" (#"submarine.adb" 10 0 0# (#"submarine.adb" 10 0 0# ( (let submarine__closedoors__L_1__R2b__assume = Submarine__closedoors__b.b.int__content in (
    #"submarine.adb" 10 0 0# assume { #"submarine.adb" 10 0 0# (submarine__closedoors__L_1__R2b__assume = Submarine__closedoors__L_1__R2b.r2b) }))
   ;
   #"submarine.adb" 10 0 0# assume { #"submarine.adb" 10 0 0# (Submarine__dr_index___axiom.dynamic_invariant Submarine__closedoors__L_1__R2b.r2b True False True True) } ))) );
   ( "GP_Sloc:submarine.adb:10:21" (#"submarine.adb" 10 0 0# (let temp___263 = Submarine__closedoors__L_1__R1b.r1b in (
   (let temp___264 = Submarine__closedoors__L_1__R2b.r2b in (
    ( () (* Translation of an Ada loop from submarine.adb:10 *)
    ;
    #"submarine.adb" 10 0 0# try
     ( #"submarine.adb" 10 0 0# abstract ensures {true}(let _ = Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content in (
      ()))
      end ;
     (let temp___268 = #"submarine.adb" 10 0 0# (any Array__Int__Submarine__door.map
     ensures {#"submarine.adb" 10 0 0# (result = Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content)} 
     ) in (
      ( () (* Unrolling of the loop statements of loop submarine.adb:10 *)
      ;
      #"submarine.adb" 10 0 0# Submarine__closedoors__L_1__i.i.int__content <- ( 1 );
      (if ((Boolean.andb((temp___263 <= Submarine__closedoors__L_1__i.i.int__content)) ((Submarine__closedoors__L_1__i.i.int__content <= temp___264)))) then (
       ( ( "GP_Sloc:submarine.adb:11:27" (#"submarine.adb" 11 0 0# #"submarine.adb" 11 0 0# Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content <- ( (Array__Int__Submarine__door.set(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (Submarine__closedoors__L_1__i.i.int__content) ((let temp___265 = (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content) in (
        ( #"submarine.adb" 11 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__doorstatus((Submarine__door.__split_fields(temp___265)))) in (
         ()))
         end ;
        { ( temp___265 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___265)) ) with Submarine__door.rec__submarine__door__doorstatus = (Submarine__doorclosedopen__rep.of_rep(0)) } } )))
       )) )) );
       ( "GP_Sloc:submarine.adb:12:33" (#"submarine.adb" 12 0 0# #"submarine.adb" 12 0 0# Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content <- ( (Array__Int__Submarine__door.set(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (Submarine__closedoors__L_1__i.i.int__content) ((let temp___267 = (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content) in (
        ( #"submarine.adb" 12 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__alock((Submarine__door.__split_fields(temp___267)))) in (
         ()))
         end ;
        { ( temp___267 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___267)) ) with Submarine__door.rec__submarine__door__alock = (let temp___266 = (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content))) in (
         ( #"submarine.adb" 12 0 0# abstract ensures {true}(let _ = (Submarine__lock.rec__submarine__lock__lockstatus((Submarine__lock.__split_fields(temp___266)))) in (
          ()))
          end ;
         { ( temp___266 ) with Submarine__lock.__split_fields = { ( (Submarine__lock.__split_fields(temp___266)) ) with Submarine__lock.rec__submarine__lock__lockstatus = (Submarine__locklockedunlocked__rep.of_rep(0)) } } )))
         } } )))
       )) )) ) )));
       Submarine__closedoors__L_1__i.i.int__content <- ( 2 );
      (if ((Boolean.andb((temp___263 <= Submarine__closedoors__L_1__i.i.int__content)) ((Submarine__closedoors__L_1__i.i.int__content <= temp___264)))) then (
       ( ( "GP_Sloc:submarine.adb:11:27" (#"submarine.adb" 11 0 0# #"submarine.adb" 11 0 0# Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content <- ( (Array__Int__Submarine__door.set(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (Submarine__closedoors__L_1__i.i.int__content) ((let temp___265 = (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content) in (
        ( #"submarine.adb" 11 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__doorstatus((Submarine__door.__split_fields(temp___265)))) in (
         ()))
         end ;
        { ( temp___265 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___265)) ) with Submarine__door.rec__submarine__door__doorstatus = (Submarine__doorclosedopen__rep.of_rep(0)) } } )))
       )) )) );
       ( "GP_Sloc:submarine.adb:12:33" (#"submarine.adb" 12 0 0# #"submarine.adb" 12 0 0# Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content <- ( (Array__Int__Submarine__door.set(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (Submarine__closedoors__L_1__i.i.int__content) ((let temp___267 = (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content) in (
        ( #"submarine.adb" 12 0 0# abstract ensures {true}(let _ = (Submarine__door.rec__submarine__door__alock((Submarine__door.__split_fields(temp___267)))) in (
         ()))
         end ;
        { ( temp___267 ) with Submarine__door.__split_fields = { ( (Submarine__door.__split_fields(temp___267)) ) with Submarine__door.rec__submarine__door__alock = (let temp___266 = (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content Submarine__closedoors__L_1__i.i.int__content))) in (
         ( #"submarine.adb" 12 0 0# abstract ensures {true}(let _ = (Submarine__lock.rec__submarine__lock__lockstatus((Submarine__lock.__split_fields(temp___266)))) in (
          ()))
          end ;
         { ( temp___266 ) with Submarine__lock.__split_fields = { ( (Submarine__lock.__split_fields(temp___266)) ) with Submarine__lock.rec__submarine__lock__lockstatus = (Submarine__locklockedunlocked__rep.of_rep(0)) } } )))
         } } )))
       )) )) ) ))) )))
      )
    with
     Submarine__closedoors__L_1.L_1 -> ()
    end )))
   ))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = ( (let j =  (any int
  ) in (
   (if ((Boolean.andb((1 <= j)) ((j <= 2)))) then (
     abstract ensures {true}(let _ = ( ((Submarine__doorclosedopen__rep.to_rep((Submarine__door.rec__submarine__door__doorstatus((Submarine__door.__split_fields((Array__Int__Submarine__door.get(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (j)))))))) = 0) && ((Submarine__locklockedunlocked__rep.to_rep((Submarine__lock.rec__submarine__lock__lockstatus((Submarine__lock.__split_fields((Submarine__door.rec__submarine__door__alock((Submarine__door.__split_fields((Array__Int__Submarine__door.get(Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content) (j)))))))))))) = 0) ) in (
     ()))
     end ))))
  ;
   (any bool
  requires { true} 
  ensures { ( (result = True) <-> (forall j   "model" "model_trace:2828" "name:J"  : int.
   ( ( (1 <= j) /\ (j <= 2) ) -> ( ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content j)))) = 0) /\ ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoors__ds.ds.Array__Int__Submarine__door.map__content j)))))) = 0) ) )) )} 
  ) ) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "closedoorsinvariant" defined at submarine.ads:51, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__closedoorsinvariant__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__doorclosedopen
 use        Submarine__doorclosedopen__rep
 use        Submarine__locklockedunlocked
 use        Submarine__locklockedunlocked__rep
 use        Submarine__lock
 use        Submarine__door
 use        Array__Int__Submarine__door
 use        Submarine__doors___axiom
 use        Submarine__closedoorsinvariant__ds
 use        Submarine__doorclosedopen___axiom
 use        Submarine__locklockedunlocked___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doors___axiom
 use        Submarine__closedoorsinvariant__ds___axiom

 val submarine__closedoorsinvariant__result "model_projected" "model_trace:2855@result" "name:closeDoorsInvariant"  : bool__ref 
 
 let def #"submarine.ads" 51 0 0#"W:diverges:N" "GP_Subp:submarine.ads:51" 
   (__void_param : unit)
  requires { #"submarine.ads" 51 0 0# true }
  ensures { #"submarine.ads" 51 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:51 *)
  ;
  #"submarine.ads" 51 0 0# assume { #"submarine.ads" 51 0 0# (Submarine__doors___axiom.dynamic_invariant Submarine__closedoorsinvariant__ds.ds True False True True) };
  #"submarine.ads" 51 0 0# assume { #"submarine.ads" 51 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:51 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:51 *)
  ;
  #"submarine.ads" 51 0 0# abstract ensures {true}(let _ = True in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:51 *)
  ;
  #"submarine.ads" 51 0 0# assume { #"submarine.ads" 51 0 0# true };
  #"submarine.ads" 51 0 0# try
   ( ( "GP_Sloc:submarine.ads:52:8" (#"submarine.ads" 52 0 0# ( #"submarine.ads" 52 0 0# submarine__closedoorsinvariant__result.bool__content <- ( ( (let j = #"submarine.ads" 52 0 0# (any int
   ) in (
    (if ((Boolean.andb((1 <= j)) ((j <= 2)))) then (
     #"submarine.ads" 52 0 0# abstract ensures {true}(let _ = ( ((Submarine__doorclosedopen__rep.to_rep((Submarine__door.rec__submarine__door__doorstatus((Submarine__door.__split_fields((Array__Int__Submarine__door.get(Submarine__closedoorsinvariant__ds.ds) (j)))))))) = 0) && ((Submarine__locklockedunlocked__rep.to_rep((Submarine__lock.rec__submarine__lock__lockstatus((Submarine__lock.__split_fields((Submarine__door.rec__submarine__door__alock((Submarine__door.__split_fields((Array__Int__Submarine__door.get(Submarine__closedoorsinvariant__ds.ds) (j)))))))))))) = 0) ) in (
      ()))
      end ))))
   ;
   #"submarine.ads" 52 0 0# (any bool
   requires {#"submarine.ads" 52 0 0# true} 
   ensures {#"submarine.ads" 52 0 0# ( (result = True) <-> (forall j #"submarine.ads" 52 0 0#  "model" "name:J" "model_trace:2875"  : int.
    ( ( (1 <= j) /\ (j <= 2) ) -> ( ((Submarine__doorclosedopen__rep.to_rep (Submarine__door.rec__submarine__door__doorstatus (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoorsinvariant__ds.ds j)))) = 0) /\ ((Submarine__locklockedunlocked__rep.to_rep (Submarine__lock.rec__submarine__lock__lockstatus (Submarine__lock.__split_fields (Submarine__door.rec__submarine__door__alock (Submarine__door.__split_fields (Array__Int__Submarine__door.get Submarine__closedoorsinvariant__ds.ds j)))))) = 0) ) )) )} 
   ) ) );
   #"submarine.ads" 52 0 0# raise Return__exc )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end ;
  submarine__closedoorsinvariant__result.bool__content )
end

(* Module for checking contracts and absence of run-time errors in subprogram "divesub" defined at submarine.ads:55, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__divesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__closedoorsinvariant
 use        Submarine__closedoorsinvariant___axiom
 use        Submarine__divesurfacewarnmaintain
 use        Submarine__reactertemp
 use        Submarine__reactertemp__rep
 use        Submarine__ToxygenlevelB
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__TdepthlevelB
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__divesub__sub
 use        Submarine__divesub__L_2
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Array__Int__Submarine__door
 use        Submarine__divesub__L_2___axiom
 use        Submarine__doorclosedopen___axiom
 use        Submarine__locklockedunlocked___axiom
 use        Submarine__divesurfacewarnmaintain___axiom
 use        Submarine__reactertemp___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doors___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__depthlevel___axiom
 use        Submarine__submarine___axiom
 use        Submarine__closedoorsinvariant___axiom
 use        Submarine__divesub__sub___axiom
 use        Submarine__ToxygenlevelB___axiom
 use        Submarine__TdepthlevelB___axiom

 let def #"submarine.ads" 55 0 0#"W:diverges:N" "GP_Subp:submarine.ads:55" 
   (__void_param : unit)
  requires { #"submarine.ads" 55 0 0# true }
  ensures { #"submarine.ads" 55 0 0# (#"submarine.ads" 57 0 0# ( "model_vc_post" "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc:submarine.ads:57:14" "GP_Id:3" "comment:     Post => ((sub.dl >= 3) and (sub.ox >= 3) and (sub.rt /= Hot) and closeDoorsInvariant(sub.ds));
             ^ submarine.ads:57:14:VC_POSTCONDITION" "GP_Shape:pragargs__and" ( ( ( ( "GP_Pretty_Ada:2935" "GP_Sloc:submarine.ads:57:15" ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) >= 3) ) /\ ( "GP_Pretty_Ada:2941" "GP_Sloc:submarine.ads:57:33" ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) >= 3) ) ) /\ ( "GP_Pretty_Ada:2947" "GP_Sloc:submarine.ads:57:51" ((Submarine__reactertemp__rep.to_rep (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) <> 0) ) ) /\ ( "GP_Pretty_Ada:2953" "GP_Sloc:submarine.ads:57:71" ((epsilon temp___result_283 : bool.
   ( (temp___result_283 = (Submarine__closedoorsinvariant.closedoorsinvariant (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))) /\ (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard temp___result_283 (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) )) = True) ) ) )) }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:55 *)
  ;
   assume {  (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } True False True True) };
   assume {  true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:55 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:55 *)
  ;
   abstract ensures {true}(let _ = (Submarine__closedoorsinvariant___axiom.closedoorsinvariant((Submarine__submarine.rec__submarine__submarine__ds((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:55 *)
  ;
   assume {  ((epsilon temp___result_282 : bool.
   ( (temp___result_282 = (Submarine__closedoorsinvariant.closedoorsinvariant (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))) /\ (Submarine__closedoorsinvariant.closedoorsinvariant__function_guard temp___result_282 (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) )) = True) };
   try
   ( (#"submarine.adb" 20 0 0# ());
   ( "GP_Sloc:submarine.adb:18:14" (#"submarine.adb" 18 0 0# (let temp___274 = (let temp___273 = { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
    ( #"submarine.adb" 18 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__rt((Submarine__submarine.__split_fields(temp___273)))) in (
     ()))
     end ;
    { ( temp___273 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___273)) ) with Submarine__submarine.rec__submarine__submarine__rt = (Submarine__reactertemp__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 18 0 0# Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___274)) )))
   ) );
   ( "GP_Sloc:submarine.adb:20:59" (#"submarine.adb" 20 0 0# ( () (* Translation of an Ada loop from submarine.adb:20 *)
   ;
   (if ((Boolean.andb((Boolean.andb(((Submarine__depthlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) > 3)) (((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) > 3)))) (((Submarine__reactertemp__rep.to_rep((Submarine__submarine.rec__submarine__submarine__rt((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) <> 0)))) then (
    #"submarine.adb" 20 0 0# try
     ( #"submarine.adb" 20 0 0# abstract ensures {true}(let _ = { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
      ()))
      end ;
     (let temp___279 = #"submarine.adb" 20 0 0# (any Submarine__submarine.submarine
     ensures {#"submarine.adb" 20 0 0# (result = { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })} 
     ) in (
      ( () (* First unroling of the loop statements appearing before the loop invariant of loop submarine.adb:20 *)
      ;
      () (* While loop translating the Ada loop from submarine.adb:20 *)
      ;
      #"submarine.adb" 20 0 0# while True do
       ( () (* Assume implicit invariants from the loop submarine.adb:20 *)
       ;
       #"submarine.adb" 20 0 0# assume { #"submarine.adb" 20 0 0# (Boolean.andb(( ( true /\ (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } True True True True) ) /\ ( ( ((Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })) = (Submarine__submarine.rec__submarine__submarine__ds (Submarine__submarine.__split_fields temp___279))) /\ ((Submarine__submarine.rec__submarine__submarine__subdive (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })) = (Submarine__submarine.rec__submarine__submarine__subdive (Submarine__submarine.__split_fields temp___279))) ) /\ ((Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })) = (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields temp___279))) ) )) (( ( ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) > 3) /\ ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) > 3) ) /\ ((Submarine__reactertemp__rep.to_rep (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) <> 0) ))) };
       () (* Check for absence of RTE in the invariant of loop submarine.adb:20 *)
       ;
       () (* Loop statements appearing after the loop invariant of loop submarine.adb:20 *)
       ;
       ( "GP_Sloc:submarine.adb:21:19" (#"submarine.adb" 21 0 0# (let temp___276 = (let temp___275 = { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
        ( #"submarine.adb" 21 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields(temp___275)))) in (
         ()))
         end ;
        { ( temp___275 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___275)) ) with Submarine__submarine.rec__submarine__submarine__dl = (Submarine__depthlevel__rep.of_rep((#"submarine.adb" 21 0 0# ( "model_vc" "keep_on_simp" "GP_Sloc:submarine.adb:21:29" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Id:1" "comment:           sub.dl := sub.dl - 1;
                            ^ submarine.adb:21:29:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__sub_assign__sub" (Submarine__TdepthlevelB.range_check_(((Submarine__depthlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) - 1))) )))) } } )))
        in (
         Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___276)) )))
       ) );
       ( "GP_Sloc:submarine.adb:22:19" (#"submarine.adb" 22 0 0# (let temp___278 = (let temp___277 = { Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
        ( #"submarine.adb" 22 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields(temp___277)))) in (
         ()))
         end ;
        { ( temp___277 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___277)) ) with Submarine__submarine.rec__submarine__submarine__ox = (Submarine__oxygenlevel__rep.of_rep((#"submarine.adb" 22 0 0# ( "model_vc" "keep_on_simp" "GP_Reason:VC_OVERFLOW_CHECK" "GP_Shape:L_2_while__sub_assign__sub" "GP_Sloc:submarine.adb:22:29" "GP_Id:2" "comment:           sub.ox := sub.ox - 1;
                            ^ submarine.adb:22:29:VC_OVERFLOW_CHECK" (Submarine__ToxygenlevelB.range_check_(((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) - 1))) )))) } } )))
        in (
         Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___278)) )))
       ) );
       () (* Check for the exit condition and loop statements appearing before the loop invariant of loop submarine.adb:20 *)
       ;
       (if (not ( (Boolean.andb((Boolean.andb(((Submarine__depthlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) > 3)) (((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) > 3)))) (((Submarine__reactertemp__rep.to_rep((Submarine__submarine.rec__submarine__submarine__rt((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) <> 0))) )) then (
         raise Submarine__divesub__L_2.L_2)) )
      done )))
      )
    with
     Submarine__divesub__L_2.L_2 -> ()
    end)) )) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = (Boolean.andb((Boolean.andb((Boolean.andb(((Submarine__depthlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) >= 3)) (((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) >= 3)))) (((Submarine__reactertemp__rep.to_rep((Submarine__submarine.rec__submarine__submarine__rt((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) <> 0)))) ((Submarine__closedoorsinvariant___axiom.closedoorsinvariant((Submarine__submarine.rec__submarine__submarine__ds((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__divesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))))) in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "resurfacesub" defined at submarine.ads:60, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__resurfacesub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        "_gnatprove_standard".Boolean
 use        Submarine__divesurfacewarnmaintain
 use        Submarine__divesurfacewarnmaintain__rep
 use        Submarine__reactertemp
 use        Submarine__reactertemp__rep
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__depthlevel
 use        Submarine__depthlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__resurfacesub__sub
 use        Submarine__doorclosedopen___axiom
 use        Submarine__locklockedunlocked___axiom
 use        Submarine__divesurfacewarnmaintain___axiom
 use        Submarine__reactertemp___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doors___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__depthlevel___axiom
 use        Submarine__submarine___axiom
 use        Submarine__resurfacesub__sub___axiom

 let def #"submarine.ads" 60 0 0#"W:diverges:N" "GP_Subp:submarine.ads:60" 
   (__void_param : unit)
  requires { #"submarine.ads" 60 0 0# true }
  ensures { #"submarine.ads" 60 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:60 *)
  ;
  #"submarine.ads" 60 0 0# assume { #"submarine.ads" 60 0 0# (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } True False True True) };
  #"submarine.ads" 60 0 0# assume { #"submarine.ads" 60 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:60 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:60 *)
  ;
  #"submarine.ads" 60 0 0# abstract ensures {true}(let _ = (Boolean.andb(((Submarine__depthlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__dl((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) < 6)) ((Boolean.orb(((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) = 0)) (((Submarine__reactertemp__rep.to_rep((Submarine__submarine.rec__submarine__submarine__rt((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) = 0))))) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:60 *)
  ;
  #"submarine.ads" 60 0 0# assume { #"submarine.ads" 60 0 0# ( ((Submarine__depthlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__dl (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) < 6) /\ ( ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) = 0) \/ ((Submarine__reactertemp__rep.to_rep (Submarine__submarine.rec__submarine__submarine__rt (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) = 0) ) ) };
  #"submarine.ads" 60 0 0# try
   ( ( "GP_Sloc:submarine.adb:31:19" (#"submarine.adb" 31 0 0# (let temp___285 = (let temp___284 = { Submarine__submarine.__split_fields = Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
    ( #"submarine.adb" 31 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__subdive((Submarine__submarine.__split_fields(temp___284)))) in (
     ()))
     end ;
    { ( temp___284 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___284)) ) with Submarine__submarine.rec__submarine__submarine__subdive = (Submarine__divesurfacewarnmaintain__rep.of_rep(1)) } } )))
    in (
    #"submarine.adb" 31 0 0# Submarine__resurfacesub__sub.sub__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___285)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end

(* Module for checking contracts and absence of run-time errors in subprogram "warnsub" defined at submarine.ads:64, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Submarine__warnsub__subprogram_def
 use import "_gnatprove_standard".Main
 use import "int".Int
 use        Submarine__divesurfacewarnmaintain
 use        Submarine__divesurfacewarnmaintain__rep
 use        Submarine__oxygenlevel
 use        Submarine__oxygenlevel__rep
 use        Submarine__submarine
 use        Submarine__submarine___axiom
 use        Submarine__warnsub__sub
 use        Submarine__doorclosedopen___axiom
 use        Submarine__locklockedunlocked___axiom
 use        Submarine__divesurfacewarnmaintain___axiom
 use        Submarine__reactertemp___axiom
 use        Submarine__lock___axiom
 use        Submarine__door___axiom
 use        Submarine__doors___axiom
 use        Submarine__oxygenlevel___axiom
 use        Submarine__depthlevel___axiom
 use        Submarine__submarine___axiom
 use        Submarine__warnsub__sub___axiom

 let def #"submarine.ads" 64 0 0#"W:diverges:N" "GP_Subp:submarine.ads:64" 
   (__void_param : unit)
  requires { #"submarine.ads" 64 0 0# true }
  ensures { #"submarine.ads" 64 0 0# true }
   =
  ( () (* Assume dynamic invariants of inputs of the subprogram submarine.ads:64 *)
  ;
  #"submarine.ads" 64 0 0# assume { #"submarine.ads" 64 0 0# (Submarine__submarine___axiom.dynamic_invariant { Submarine__submarine.__split_fields = Submarine__warnsub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } True False True True) };
  #"submarine.ads" 64 0 0# assume { #"submarine.ads" 64 0 0# true };
  () (* Declarations introduced by the compiler at the beginning of the subprogram submarine.ads:64 *)
  ;
  () (* Check for RTE in the Pre of the subprogram submarine.ads:64 *)
  ;
  #"submarine.ads" 64 0 0# abstract ensures {true}(let _ = ((Submarine__oxygenlevel__rep.to_rep((Submarine__submarine.rec__submarine__submarine__ox((Submarine__submarine.__split_fields({ Submarine__submarine.__split_fields = Submarine__warnsub__sub.sub__split_fields.Submarine__submarine.__split_fields__content })))))) < 4) in (
   ()))
   end ;
  () (* Assume Pre of the subprogram submarine.ads:64 *)
  ;
  #"submarine.ads" 64 0 0# assume { #"submarine.ads" 64 0 0# ((Submarine__oxygenlevel__rep.to_rep (Submarine__submarine.rec__submarine__submarine__ox (Submarine__submarine.__split_fields { Submarine__submarine.__split_fields = Submarine__warnsub__sub.sub__split_fields.Submarine__submarine.__split_fields__content }))) < 4) };
  #"submarine.ads" 64 0 0# try
   ( ( "GP_Sloc:submarine.adb:36:19" (#"submarine.adb" 36 0 0# (let temp___289 = (let temp___288 = { Submarine__submarine.__split_fields = Submarine__warnsub__sub.sub__split_fields.Submarine__submarine.__split_fields__content } in (
    ( #"submarine.adb" 36 0 0# abstract ensures {true}(let _ = (Submarine__submarine.rec__submarine__submarine__subdive((Submarine__submarine.__split_fields(temp___288)))) in (
     ()))
     end ;
    { ( temp___288 ) with Submarine__submarine.__split_fields = { ( (Submarine__submarine.__split_fields(temp___288)) ) with Submarine__submarine.rec__submarine__submarine__subdive = (Submarine__divesurfacewarnmaintain__rep.of_rep(2)) } } )))
    in (
    #"submarine.adb" 36 0 0# Submarine__warnsub__sub.sub__split_fields.Submarine__submarine.__split_fields__content <- ( (Submarine__submarine.__split_fields(temp___289)) )))
   ) );
    raise Return__exc )
  with
   Return__exc -> ()
  end;
   abstract ensures {true}(let _ = True in (
   ()))
   end  )
end
